<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>STL的介绍</title>
      <link href="/2023/09/28/c++STL%E5%BA%93/"/>
      <url>/2023/09/28/c++STL%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="STL的介绍"><a href="#STL的介绍" class="headerlink" title="STL的介绍"></a>STL的介绍</h2><p>1.STL(Standard TemplateLibrary,标准模板库)</p><p>2.STL提供了六大组件:容器，算法，迭代器，仿函数，适配器，空间配置器</p><p>​容器：各种数据结构</p><p>​算法：各种常用的算法（冒泡，排序）</p><p>​迭代器：扮演了容器与算法之间的胶合剂（类似于指针等）</p><p>​仿函数：行为类似函数，可作为算法的某种策略</p><p>​适配器：一种用来修饰容器或者仿函数或迭代器接口的东西</p><p>​空间配置器：负责空间的配置与管理</p><p>STL六大组件的交互关系，容器通过空间配置器取得数据存储空间，算法通过迭代器存储容器中的内容，仿函数可以协助算法完成不同的策略的变化，适配器可以修饰仿函数。</p><h2 id="三大组件"><a href="#三大组件" class="headerlink" title="三大组件"></a>三大组件</h2><p>容器：<strong>序列式容器</strong>和<strong>关联式容器</strong></p><p>序列式容器：序列式容器就是容器元素在容器中的位置是由元素进入容器的时间和地点来决定</p><p>关联式容器：关联式容器是指容器已经有了一定的规则，容器元素在容器中的位置由容器的规则来决定</p><p>算法分为:<strong>质变算法</strong>和<strong>非质变算法</strong></p><p>质变算法：：是指运算过程中会更改区间内的元素的内容</p><p>非质变算法：是指运算过程中不会更改区间内的元素内容</p><p>迭代器：重点学习双向迭代器和随机访问迭代器</p><p>双向迭代器：++,–可以访问下一个元素和上一个元素</p><p>随机访问迭代器：+2，可以跳2个元素访问元素</p><p>三大组件的关系：容器存储数据，并且提供迭代器，算法使用迭代器来操作容器中的元素</p><h2 id="STL的工作机制"><a href="#STL的工作机制" class="headerlink" title="STL的工作机制"></a>STL的工作机制</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F;数组容器template&lt;class T&gt;class MyArray&#123;public:&#x2F;&#x2F;保护原生指针，给原生指针取别名typedef T* iterator;MyArray()&#123;mCapacity &#x3D; 10;mSize &#x3D; 10;p &#x3D; new T[mCapacity];for (int i &#x3D; 0; i &lt; mCapacity; i++)&#123;p[i] &#x3D; i + 1;&#125;&#125;&#x2F;&#x2F;提供迭代器，开始位置的迭代器T* begin()&#123;return p;&#125;&#x2F;&#x2F;返回结束位置的迭代器T* end()&#123;return p + mSize;&#125;public:T* p;int mCapacity;int mSize;&#125;;&#x2F;&#x2F;算法template&lt;class T&gt;void printArray(T begin,T end)&#123;for (; begin !&#x3D; end; ++begin)&#123;cout &lt;&lt; *begin &lt;&lt; &quot; &quot;;&#125;&#125;void test01()&#123;MyArray&lt;int&gt; arr;&#x2F;&#x2F;获取容器提供的开始位置迭代器MyArray&lt;int&gt;::iterator begin&#x3D;arr.begin();&#x2F;&#x2F;获取容器提供的结束位置迭代器MyArray&lt;int&gt;::iterator end &#x3D; arr.end();printArray(begin, end);&#125;int main()&#123;test01();system(&quot;pause&quot;);return EXIT_SUCCESS;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="string容器"><a href="#string容器" class="headerlink" title="*string容器"></a>*string容器</h2><p>1.数据结构：连续的存储空间，用一个char*指向这片空间</p><p>2.迭代器:随机访问迭代器</p><p>3.常用的api：</p><p>​1.构造</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string();&#x2F;&#x2F;创建一个空的字符串 例如: string str;      string(conststring&amp; str);&#x2F;&#x2F;使用一个string对象初始化另一个string对象string(constchar* s);&#x2F;&#x2F;使用字符串s初始化string(int n, char c);&#x2F;&#x2F;使用n个字符c初始化 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​2.基本赋值操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string&amp;operator&#x3D;(constchar* s);&#x2F;&#x2F;char*类型字符串 赋值给当前的字符串string&amp;operator&#x3D;(conststring&amp;s);&#x2F;&#x2F;把字符串s赋给当前的字符串string&amp;operator&#x3D;(char c);&#x2F;&#x2F;字符赋值给当前的字符串string&amp; assign(constchar *s);&#x2F;&#x2F;把字符串s赋给当前的字符串string&amp; assign(constchar *s, int n);&#x2F;&#x2F;把字符串s的前n个字符赋给当前的字符串string&amp; assign(conststring&amp;s);&#x2F;&#x2F;把字符串s赋给当前字符串string&amp; assign(int n, char c);&#x2F;&#x2F;用n个字符c赋给当前字符串string&amp; assign(conststring&amp;s, int start, int n);&#x2F;&#x2F;将s从start开始n个字符赋值给字符串,如s&#x3D;hello,那么n&#x3D;3,start&#x3D;1，那么是hel中从e开始赋值3-1个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​3.存取字符操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">char&amp;operator[](int n);&#x2F;&#x2F;通过[]方式取字符char&amp; at(int n);&#x2F;&#x2F;通过at方法获取字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​4.拼接</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string&amp;operator+&#x3D;(conststring&amp; str);&#x2F;&#x2F;重载+&#x3D;操作符string&amp;operator+&#x3D;(constchar* str);&#x2F;&#x2F;重载+&#x3D;操作符string&amp;operator+&#x3D;(constchar c);&#x2F;&#x2F;重载+&#x3D;操作符string&amp; append(constchar *s);&#x2F;&#x2F;把字符串s连接到当前字符串结尾string&amp; append(constchar *s, int n);&#x2F;&#x2F;把字符串s的前n个字符连接到当前字符串结尾string&amp; append(conststring&amp;s);&#x2F;&#x2F;同operator+&#x3D;()string&amp; append(conststring&amp;s, int pos, int n);&#x2F;&#x2F;把字符串s中从pos开始的n个字符连接到当前字符串结尾string&amp; append(int n, char c);&#x2F;&#x2F;在当前字符串结尾添加n个字符c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​5.查找和替换</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int find(conststring&amp; str, int pos &#x3D; 0) const; &#x2F;&#x2F;查找str第一次出现位置,从pos开始查找int find(constchar* s, int pos &#x3D; 0) const;  &#x2F;&#x2F;查找s第一次出现位置,从pos开始查找int find(constchar* s, int pos, int n) const;  &#x2F;&#x2F;从pos位置查找s的前n个字符第一次位置int find(constchar c, int pos &#x3D; 0) const;  &#x2F;&#x2F;查找字符c第一次出现位置int rfind(conststring&amp; str, int pos &#x3D; npos) const;&#x2F;&#x2F;查找str最后一次位置,从pos开始查找int rfind(constchar* s, int pos &#x3D; npos) const;&#x2F;&#x2F;查找s最后一次出现位置,从pos开始查找int rfind(constchar* s, int pos, int n) const;&#x2F;&#x2F;从pos查找s的前n个字符最后一次位置int rfind(constchar c, int pos &#x3D; 0) const; &#x2F;&#x2F;查找字符c最后一次出现位置string&amp; replace(int pos, int n, conststring&amp; str); &#x2F;&#x2F;替换从pos开始n个字符为字符串strstring&amp; replace(int pos, int n, constchar* s); &#x2F;&#x2F;替换从pos开始的n个字符为字符串s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​6.比较</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*compare函数在&gt;时返回 1，&lt;时返回 -1，&#x3D;&#x3D;时返回 0。比较区分大小写，比较时参考字典顺序，排越前面的越小。大写的A比小写的a小。*&#x2F;int compare(conststring&amp;s) const;&#x2F;&#x2F;与字符串s比较int compare(constchar *s) const;&#x2F;&#x2F;与字符串s比较<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​7.子串</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string substr(int pos &#x3D; 0, int n &#x3D; npos) const;&#x2F;&#x2F;返回由pos开始的n个字符组成的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​8.插入和删除</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string&amp; insert(int pos, constchar* s); &#x2F;&#x2F;插入字符串string&amp; insert(int pos, conststring&amp; str); &#x2F;&#x2F;插入字符串string&amp; insert(int pos, int n, char c);&#x2F;&#x2F;在指定位置插入n个字符cstring&amp; erase(int pos, int n &#x3D; npos);&#x2F;&#x2F;删除从Pos开始的n个字符 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​9.string和const char*转换</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;string 转 char*string str &#x3D; &quot;itcast&quot;;constchar* cstr &#x3D; str.c_str();&#x2F;&#x2F;char* 转 string char* s &#x3D; &quot;itcast&quot;;string sstr(s);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.常用的api中的注意:</p><p>​1.[]和at区别：[]如果越界，不抛异常，直接挂。at会抛异常</p><p>​2.字符串内存重新分配，[]和at获取的字符引用，再次使用时，可以能会出错</p><p>​3.string和char *的区别：string是一个类，char *是一个指针</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void test10()&#123;string s &#x3D; &quot;abcde&quot;;char &amp;a &#x3D; s[2];char &amp;b &#x3D; s[3];a &#x3D; &#39;1&#39;;b &#x3D; &#39;2&#39;;cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;b:&quot; &lt;&lt; b &lt;&lt; endl;cout &lt;&lt; s &lt;&lt; endl;cout &lt;&lt; &quot;字符串的原空间地址:&quot; &lt;&lt; (int*)s.c_str() &lt;&lt; endl;s &#x3D; &quot;fdasfdasfdsafdasherewrkewhsaferew&quot;;cout &lt;&lt; &quot;字符串的空间地址:&quot; &lt;&lt; (int*)s.c_str() &lt;&lt; endl;&#x2F;&#x2F;原空间被释放，但是a还是被释放的s[2]空间的别名，如果操作非法的空间，会出错&#x2F;&#x2F;a &#x3D; &#39;3&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vector容器"><a href="#vector容器" class="headerlink" title="*vector容器"></a>*vector容器</h2><p>1.数据结构:连续存储空间</p><p>2.迭代器：随机迭代器</p><p>3.vector容器动态增长原理</p><p>​1.当存储空不够时，会开辟另一块大的空间，然后把数据拷贝过去，最后在销毁原来的空间</p><p>​2.申请的空间,会比用户需求大一点</p><p>​3.重新分配空间，那么原来的迭代器就会失效</p><p>4.常用的api:</p><p>​1.构造</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;T&gt; v; &#x2F;&#x2F;采用模板实现类实现，默认构造函数vector&lt;T&gt; v(n); &#x2F;&#x2F; 定义了n个整型元素的向量，但是这个n个元素没有初始化，值为随机值；vector(v.begin(), v.end());&#x2F;&#x2F;将v[begin(), end())区间中的元素拷贝给本身。vector(n, elem);&#x2F;&#x2F;构造函数将n个elem拷贝给本身。vector(const vector &amp;vec);&#x2F;&#x2F;拷贝构造函数。&#x2F;&#x2F;例子 使用第二个构造函数 我们可以...int arr[] &#x3D; &#123;2,3,4,1,9&#125;;vector&lt;int&gt; v1(arr, arr + sizeof(arr) &#x2F; sizeof(int)); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​2.赋值操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">assign(beg, end);&#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。assign(n, elem);&#x2F;&#x2F;将n个elem拷贝赋值给本身。vector&amp;operator&#x3D;(const vector  &amp;vec);&#x2F;&#x2F;重载等号操作符swap(vec);&#x2F;&#x2F; 将vec与本身的元素互换。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​3.大小操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">size();&#x2F;&#x2F;返回容器中元素的个数empty();&#x2F;&#x2F;判断容器是否为空resize(int num);&#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。resize(int num, elem);&#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长&gt;度的元素被删除。capacity();&#x2F;&#x2F;容器的容量reserve(int len);&#x2F;&#x2F;容器预留len个元素长度，预留位置不初始化，元素不可访问。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​4.数据存取</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">at(int idx); &#x2F;&#x2F;返回索引idx所指的数据，如果idx越界，抛出out_of_range异常。operator[];&#x2F;&#x2F;返回索引idx所指的数据，越界时，运行直接报错front();&#x2F;&#x2F;返回容器中第一个数据元素back();&#x2F;&#x2F;返回容器中最后一个数据元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​5.插入和删除</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">insert(const_iterator pos, int count,ele);&#x2F;&#x2F;迭代器指向位置pos插入count个元素ele.push_back(ele); &#x2F;&#x2F;尾部插入元素elepop_back();&#x2F;&#x2F;删除最后一个元素erase(const_iterator start, const_iterator end);&#x2F;&#x2F;删除迭代器从start到end之间的元素erase(const_iterator pos);&#x2F;&#x2F;删除迭代器指向的元素clear();&#x2F;&#x2F;删除容器中所有元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.常用的api中的注意:</p><p>​1.resize开辟空间，并初始化。reserve开辟空间，但不初始化.没有初始化的空间不能访问</p><p>6.reserve作用：如果容器要存储大量数据时，要先开辟空间，避免多次申请空间</p><p>7.swap作用:缩小容器的容量</p><h2 id="deque容器"><a href="#deque容器" class="headerlink" title="deque容器"></a>deque容器</h2><p>1.数据结构:逻辑上是连续的存储空间，实际上的由很多块定量的块空间，通过中控制连接起来</p><p>2.迭代器:随机迭代器</p><p>3.常用的api：</p><p>​1.构造</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">deque&lt;T&gt; deqT;&#x2F;&#x2F;默认构造形式deque(beg, end);&#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。deque(n, elem);&#x2F;&#x2F;构造函数将n个elem拷贝给本身。deque(const deque &amp;deq);&#x2F;&#x2F;拷贝构造函数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​2.赋值</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">assign(beg, end);&#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。assign(n, elem);&#x2F;&#x2F;将n个elem拷贝赋值给本身。deque&amp;operator&#x3D;(const deque &amp;deq); &#x2F;&#x2F;重载等号操作符 swap(deq);&#x2F;&#x2F; 将deq与本身的元素互换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​3.大小</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">deque.size();&#x2F;&#x2F;返回容器中元素的个数deque.empty();&#x2F;&#x2F;判断容器是否为空deque.resize(num);&#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。deque.resize(num, elem); &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以elem值填充新位置,如果容器变短，则末尾超出容器长度的元素被删除。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​4.双端插入和删除操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">push_back(elem);&#x2F;&#x2F;在容器尾部添加一个数据push_front(elem);&#x2F;&#x2F;在容器头部插入一个数据pop_back();&#x2F;&#x2F;删除容器最后一个数据pop_front();&#x2F;&#x2F;删除容器第一个数据at(idx);&#x2F;&#x2F;返回索引idx所指的数据，如果idx越界，抛出out_of_range。operator[];&#x2F;&#x2F;返回索引idx所指的数据，如果idx越界，不抛出异常，直接出错。front();&#x2F;&#x2F;返回第一个数据。back();&#x2F;&#x2F;返回最后一个数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​5.插入和删除操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">insert(pos,elem);&#x2F;&#x2F;在pos位置插入一个elem元素的拷贝，返回新数据的位置。insert(pos,n,elem);&#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。insert(pos,beg,end);&#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。clear();&#x2F;&#x2F;移除容器的所有数据erase(beg,end);&#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。erase(pos);&#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="stack容器"><a href="#stack容器" class="headerlink" title="stack容器"></a>stack容器</h2><p>1.数据结构：连续的存储空间，只有一个出口，先进后出特性</p><p>2.迭代器:没有迭代器</p><p>3.常用的api:</p><p>​1.构造函数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">stack&lt;T&gt; stk;&#x2F;&#x2F;stack采用模板类实现， stack对象的默认构造形式： stack(const stack &amp;stk);&#x2F;&#x2F;拷贝构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​2.赋值</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">stack&amp;operator&#x3D;(const stack &amp;stk);&#x2F;&#x2F;重载等号操作符<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​3.数据存取</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">push(elem);&#x2F;&#x2F;向栈顶添加元素pop();&#x2F;&#x2F;从栈顶移除第一个元素top();&#x2F;&#x2F;返回栈顶元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​3.大小操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">empty();&#x2F;&#x2F;判断堆栈是否为空size();&#x2F;&#x2F;返回堆栈的大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="queue容器"><a href="#queue容器" class="headerlink" title="*queue容器"></a>*queue容器</h2><p>1.数据结构：连续的存储空间，有两个口，一个是进入数据，一个是出数据，有先进先出的特性</p><p>2.迭代器：没有迭代器</p><p>3.常用的api:</p><p>​1.构造函数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">queue&lt;T&gt; queT;&#x2F;&#x2F;queue采用模板类实现，queue对象的默认构造形式：queue(const queue &amp;que);&#x2F;&#x2F;拷贝构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​2.存取、插入和删除操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">push(elem);&#x2F;&#x2F;往队尾添加元素pop();&#x2F;&#x2F;从队头移除第一个元素back();&#x2F;&#x2F;返回最后一个元素front();&#x2F;&#x2F;返回第一个元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​3.赋值</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">queue&amp;operator&#x3D;(const queue &amp;que);&#x2F;&#x2F;重载等号操作符<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​4.大小操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">empty();&#x2F;&#x2F;判断队列是否为空size();&#x2F;&#x2F;返回队列的大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="list容器"><a href="#list容器" class="headerlink" title="*list容器"></a>*list容器</h2><p>1.数据结构：双向循环链表</p><p>2.迭代器：双向迭代器</p><p>3.常用的api:</p><p>​1.构造</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">list&lt;T&gt; lstT;&#x2F;&#x2F;list采用采用模板类实现,对象的默认构造形式：list(beg,end);&#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。list(n,elem);&#x2F;&#x2F;构造函数将n个elem拷贝给本身。list(const list &amp;lst);&#x2F;&#x2F;拷贝构造函数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​2.数据元素的插入和删除</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">push_back(elem);&#x2F;&#x2F;在容器尾部加入一个元素pop_back();&#x2F;&#x2F;删除容器中最后一个元素push_front(elem);&#x2F;&#x2F;在容器开头插入一个元素pop_front();&#x2F;&#x2F;从容器开头移除第一个元素insert(pos,elem);&#x2F;&#x2F;在pos位置插elem元素的拷贝，返回新数据的位置。insert(pos,n,elem);&#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。insert(pos,beg,end);&#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。clear();&#x2F;&#x2F;移除容器的所有数据erase(beg,end);&#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。erase(pos);&#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。remove(elem);&#x2F;&#x2F;删除容器中所有与elem值匹配的元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​3.大小操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">size();&#x2F;&#x2F;返回容器中元素的个数empty();&#x2F;&#x2F;判断容器是否为空resize(num);&#x2F;&#x2F;重新指定容器的长度为num，&#x2F;&#x2F;若容器变长，则以默认值填充新位置。&#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。resize(num, elem);&#x2F;&#x2F;重新指定容器的长度为num，&#x2F;&#x2F;若容器变长，则以elem值填充新位置。&#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​4.赋值操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">assign(beg, end);&#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。assign(n, elem);&#x2F;&#x2F;将n个elem拷贝赋值给本身。list&amp;operator&#x3D;(const list &amp;lst);&#x2F;&#x2F;重载等号操作符swap(lst);&#x2F;&#x2F;将lst与本身的元素互换。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​5.数据的存取</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">front();&#x2F;&#x2F;返回第一个元素。back();&#x2F;&#x2F;返回最后一个元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​6.反转和排序</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">reverse();&#x2F;&#x2F;反转链表，比如lst包含1,3,5元素，运行此方法后，lst就包含5,3,1元素。sort(); &#x2F;&#x2F;list排序list.unique();&#x2F;&#x2F;去除重复的单词<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.注意：list容器不能使用常用的sort,只能使用自己的sort</p><h2 id="pair对组"><a href="#pair对组" class="headerlink" title="pair对组"></a>pair对组</h2><p>1.pair对组是一个类，类中有两个公有的成员变量</p><p>2.对组通常用来接收key-vluae这样的元素</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;第一种方法创建一个对组pair&lt;string, int&gt; pair1(string(&quot;name&quot;), 20);cout &lt;&lt; pair1.first &lt;&lt; endl; &#x2F;&#x2F;访问pair第一个值cout &lt;&lt; pair1.second &lt;&lt; endl;&#x2F;&#x2F;访问pair第二个值&#x2F;&#x2F;第二种pair&lt;string, int&gt; pair2 &#x3D; make_pair(&quot;name&quot;, 30);cout &lt;&lt; pair2.first &lt;&lt; endl;cout &lt;&lt; pair2.second &lt;&lt; endl;&#x2F;&#x2F;pair&#x3D;赋值pair&lt;string, int&gt; pair3 &#x3D; pair2;cout &lt;&lt; pair3.first &lt;&lt; endl;cout &lt;&lt; pair3.second &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="set-multiset容器"><a href="#set-multiset容器" class="headerlink" title="*set&#x2F;multiset容器"></a>*set&#x2F;multiset容器</h2><p>1.set容器是关联式容器，容器自身有规则，通过键值排序，set容器中的元素是键值也是实值</p><p>2.set容器和multiset容器的区别是multiset允许有相同的元素</p><p>3.数据结构：平衡二叉树</p><p>4.迭代器：双向迭代器</p><p>5.常用的api:</p><p>​1.构造</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">set&lt;T&gt; st;&#x2F;&#x2F;set默认构造函数：mulitset&lt;T&gt; mst; &#x2F;&#x2F;multiset默认构造函数: set(const set &amp;st);&#x2F;&#x2F;拷贝构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​2.赋值</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">set&amp;operator&#x3D;(const set &amp;st);&#x2F;&#x2F;重载等号操作符swap(st);&#x2F;&#x2F;交换两个集合容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​3.大小</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">size();&#x2F;&#x2F;返回容器中元素的数目empty();&#x2F;&#x2F;判断容器是否为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​4.插入和删除</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">insert(elem);&#x2F;&#x2F;在容器中插入元素。clear();&#x2F;&#x2F;清除所有元素erase(pos);&#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。erase(beg, end);&#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。erase(elem);&#x2F;&#x2F;删除容器中值为elem的元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​5.查找操作</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">find(key);&#x2F;&#x2F;查找键key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();count(key);&#x2F;&#x2F;查找键key的元素个数lower_bound(keyElem);&#x2F;&#x2F;返回第一个key&gt;&#x3D;keyElem元素的迭代器。upper_bound(keyElem);&#x2F;&#x2F;返回第一个key&gt;keyElem元素的迭代器。equal_range(keyElem);&#x2F;&#x2F;返回容器中key与keyElem相等的上下限的两个迭代器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.改变规则：默认是从小到大，改变规则，加入谓词到&lt;&gt;第二个参数中</p><p>7.注意：</p><p>​1.set容器插入相同元素时，不会报错，但是不插入数据</p><p>​2.set容器存储对象时，需要告诉set容器的规则</p><p>​</p><h2 id="map-multimap容器"><a href="#map-multimap容器" class="headerlink" title="*map&#x2F;multimap容器"></a>*map&#x2F;multimap容器</h2><p>1.map&#x2F;multimap也是关联式容器，容器自身有规则，通过键值排序，map容器中的元素是对组，对组的第一个元素是键值，不能改变，第二个元素是实值，可以改变</p><p>2.数据结构：平衡二叉树</p><p>3.迭代器：双向迭代器</p><p>4.map容器和multimap容器的区别是multimap允许有相同的元素</p><p>5.常用的api:</p><p>​1.构造</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">map&lt;T1, T2&gt; mapTT;&#x2F;&#x2F;map默认构造函数: map(const map &amp;mp);&#x2F;&#x2F;拷贝构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​2.赋值</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">map&amp;operator&#x3D;(const map &amp;mp);&#x2F;&#x2F;重载等号操作符swap(mp);&#x2F;&#x2F;交换两个集合容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​3.大小</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">size();&#x2F;&#x2F;返回容器中元素的数目empty();&#x2F;&#x2F;判断容器是否为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​4.查找</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">find(key);&#x2F;&#x2F;查找键key是否存在,若存在，返回该键的元素的迭代器；&#x2F;若不存在，返回map.end();count(keyElem);&#x2F;&#x2F;返回容器中key为keyElem的对组个数。对map来说，要么是0，要么是1。对multimap来说，值可能大于1。lower_bound(keyElem);&#x2F;&#x2F;返回第一个key&gt;&#x3D;keyElem元素的迭代器。upper_bound(keyElem);&#x2F;&#x2F;返回第一个key&gt;keyElem元素的迭代器。equal_range(keyElem);&#x2F;&#x2F;返回容器中key与keyElem相等的上下限的两个迭代器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​5.插入</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">map.insert(...); &#x2F;&#x2F;往容器插入元素，返回pair&lt;iterator,bool&gt;map&lt;int, string&gt; mapStu;&#x2F;&#x2F; 第一种 通过pair的方式插入对象mapStu.insert(pair&lt;int, string&gt;(3, &quot;小张&quot;));&#x2F;&#x2F; 第二种 通过pair的方式插入对象mapStu.inset(make_pair(-1, &quot;校长&quot;));&#x2F;&#x2F; 第三种 通过value_type的方式插入对象mapStu.insert(map&lt;int, string&gt;::value_type(1, &quot;小李&quot;));&#x2F;&#x2F; 第四种 通过数组的方式插入值mapStu[3] &#x3D; &quot;小刘&quot;;mapStu[5] &#x3D; &quot;小王&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​6.删除</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">clear();&#x2F;&#x2F;删除所有元素erase(pos);&#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。erase(beg,end);&#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。erase(keyElem);&#x2F;&#x2F;删除容器中key为keyElem的对组。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="STL的深浅拷贝问题"><a href="#STL的深浅拷贝问题" class="headerlink" title="STL的深浅拷贝问题"></a>STL的深浅拷贝问题</h2><p>1.把对象放入容器，其实是拷贝一份对象到容器。</p><p>2.注意：</p><p>​1.拷贝构造要能被调用<br>​2.注意要浅拷贝问题</p><h2 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h2><p>1.什么是函数对象</p><p>​1.类中重载了()，这个类实例化的对象叫函数对象（仿函数）;</p><p>​2.一元仿函数是operator()中只需要一个参数。二元仿函数是operator()中需要二个参数</p><p>2.有什么用</p><p>​1.做为算法的策略</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void test()&#123;vector&lt;int&gt; v;v.push_back(8);v.push_back(1);v.push_back(6);v.push_back(3);v.push_back(7);sort(v.begin(), v.end(), greater&lt;int&gt;());for_each(v.begin(), v.end(), [](int val)&#123;cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;);&#x2F;&#x2F;[](int val)&#123;cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125;&#x2F;&#x2F;匿名函数&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.函数对象和普通函数的区别</p><p>​1.函数对象可以有自己的状态</p><p>​2.普通函数没有类型，函数对象有类型</p><p>​3.函数对象比普通函数执行效率有可能更高（成员函数自动申请为内联函数）</p><p>4.谓词</p><p>​1.谓词是指普通函数或重载的operator()返回值是bool类型的函数对象(仿函数)。</p><p>​2.谓词可以作为一个判断式</p><p>​3.接受一个参数，那么叫做一元谓词,如果接受两个参数，那么叫做二元谓词</p><p>5.内建函数对象</p><p>​1.使用内建的函数对象要加入头文件#include<functional></p><p>​</p><h2 id="函数对象适配"><a href="#函数对象适配" class="headerlink" title="函数对象适配"></a>函数对象适配</h2><p>1.什么是函数对象适配：当函数对象的参数不够用，那么可以用适配器来配置函数对象。</p><p>2.函数适配器：bind1st,bind2nd,将二元函数对象配置为一元函数对象</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;第一步:继承binary_function&lt;参数1，参数2，返回类型&gt;struct Myfunc:public binary_function&lt;int,int,void&gt;&#123;void operator()(int v1,int v2)const &#x2F;&#x2F;第二步：加上const成为常函数，参数变2个&#123;&#x2F;&#x2F;cout &lt;&lt; v1 &lt;&lt; &quot; &quot; &lt;&lt; endl;cout &lt;&lt; v1 + v2 &lt;&lt; endl;&#x2F;&#x2F;第三步：实现函数体&#125;&#125;;&#x2F;&#x2F;需求：打印时，每个元素加100然后打印出来void test()&#123;vector&lt;int&gt; v;v.push_back(10);v.push_back(20);v.push_back(30);v.push_back(40);v.push_back(50);&#x2F;&#x2F;for_each(v.begin(), v.end(), Myfunc());&#x2F;&#x2F;第四步：用bind2nd来绑定函数对象for_each(v.begin(), v.end(), bind2nd(Myfunc(),100));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.bind1st和bind2nd的区别<br>bind1st把100绑定给第一个参数，bind2nd把100绑定给第二个参数</p><p>4.函数对象适配器 not1 not2 取反</p><p>1.not1和not2的区别：not1针对一元函数对象，not2针对二元函数对象</p><p>2.使用not1和not2</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;第一步：继承struct MyNotfunc:public unary_function&lt;int,bool&gt;&#123;bool operator()(int v)const &#x2F;&#x2F;第二步：变为常函数&#123;return v &gt;&#x3D; 20;&#125; &#125;;&#x2F;&#x2F;not1 和not2 void myPrint(int val)&#123;cout &lt;&lt; val &lt;&lt; &quot; &quot;;&#125;void test02()&#123;vector&lt;int&gt; v;v.push_back(10);v.push_back(50);v.push_back(30);v.push_back(40);v.push_back(50);&#x2F;&#x2F;find_if()&#x2F;*_InIt _Find_if(_InIt _First, _InIt _Last, _Pr _Pred)&#123;&#x2F;&#x2F; find first satisfying _Predfor (; _First !&#x3D; _Last; ++_First)if (_Pred(*_First))break;return (_First);&#125;*&#x2F;&#x2F;&#x2F;第三步：适配vector&lt;int&gt;::iterator it&#x3D;find_if(v.begin(), v.end(), not1(MyNotfunc()));if (it &#x3D;&#x3D; v.end())&#123;cout &lt;&lt; &quot;查找失败&quot; &lt;&lt; endl;&#125;else&#123;cout &lt;&lt; &quot;查找成功&#x3D;&quot; &lt;&lt; *it &lt;&lt; endl;&#125;&#x2F;&#x2F;not2的使用&#x2F;&#x2F;less 二元函数对象vector&lt;int&gt; v2;v2.push_back(10);v2.push_back(50);v2.push_back(30);v2.push_back(40);v2.push_back(50);&#x2F;&#x2F;release模式下可以sort(v2.begin(), v2.end(),not2(less&lt;int&gt;()));for_each(v2.begin(), v2.end(), myPrint);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.普通函数进行适配</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;普通函数进行适配 ptr_fun&#x2F;&#x2F;第一步:把一个参数变为二个参数void myprint2(int val,int val2)&#123;cout &lt;&lt; val+val2&lt;&lt; &quot; &quot;;&#125;void test03()&#123;vector&lt;int&gt; v;v.push_back(10);v.push_back(20);v.push_back(30);v.push_back(40);v.push_back(50);&#x2F;&#x2F;第二步：把普通函数变为函数对象 ptr_funfor_each(v.begin(), v.end(), bind2nd(ptr_fun(myprint2),100));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.成员函数适配</p><p>1.mem_fun : 如果存储的是对象指针，需要使用mem_fun</p><p>2.mem_fun_ref : 如果存储的是对象，需要使用mem_fun_ref</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Maker&#123;public:Maker(string name,int age)&#123;this-&gt;name &#x3D; name;this-&gt;age &#x3D; age;&#125;&#x2F;&#x2F;成员函数void MyprintMaker()&#123;cout &lt;&lt; &quot;Name:&quot; &lt;&lt; this-&gt;name &lt;&lt; &quot; Age:&quot; &lt;&lt; this-&gt;age &lt;&lt; endl;&#125;public:string name;int age;&#125;;&#x2F;&#x2F;void MyprintMaker(Maker m)&#x2F;&#x2F;&#123;&#x2F;&#x2F;cout &lt;&lt; &quot;Name:&quot; &lt;&lt; m.name &lt;&lt; &quot; Age:&quot; &lt;&lt; m.age &lt;&lt; endl;&#x2F;&#x2F;&#125;void test04()&#123;vector&lt;Maker&gt; v;v.push_back(Maker(&quot;aaa&quot;, 10));v.push_back(Maker(&quot;bbb&quot;, 20));v.push_back(Maker(&quot;ccc&quot;, 30));&#x2F;&#x2F;当容器存储的是对象，用mem_fun_ref适配他的成员函数for_each(v.begin(), v.end(), mem_fun_ref(&amp;Maker::MyprintMaker));cout &lt;&lt; &quot;-------------&quot; &lt;&lt; endl;vector&lt;Maker*&gt; vp;vp.push_back(new Maker(&quot;aaa&quot;, 10));vp.push_back(new Maker(&quot;bbb&quot;, 20));vp.push_back(new Maker(&quot;ccc&quot;, 30));&#x2F;&#x2F;当容器存储的是对象指针，用mem_fun适配他的成员函数for_each(vp.begin(), vp.end(), mem_fun(&amp;Maker::MyprintMaker));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="空间配置器"><a href="#空间配置器" class="headerlink" title="空间配置器"></a>空间配置器</h2><p>如果申请的内存大小超过128，那么空间配置器就自动调用一级空间配置器。反之调用二级空间配置器。</p><h2 id="算法概念"><a href="#算法概念" class="headerlink" title="算法概念"></a>算法概念</h2><p>1.算法通过迭代器来操作容器中元素</p><p>2.算法的头文件:<algorithm><functional><numeric></p><h2 id="遍历算法"><a href="#遍历算法" class="headerlink" title="遍历算法"></a>遍历算法</h2><p>1.for_each：遍历打印</p><p>​1.for_each(开始迭代器，结束迭代器，函数对象)</p><p>2.transform:搬运</p><p>​1.transform（源开始迭代器，源结束迭代器，目标开始迭代器，函数对象）</p><p>​2.transform（源1开始迭代器，源1结束迭代器，源2开始迭代器，目标开始迭代器，函数对象）</p><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><p>1.find:查找元素</p><p>​find(开始迭代器，结束迭代器，要查找的数值);</p><p>​find_if(开始迭代器，结束迭代器,谓词或函数对象);</p><p>2.adjacent_find算法 查找相邻重复元素</p><p>​adjacent_find(开始迭代器，结束迭代器)</p><p>​adjacent_find(开始迭代器，结束迭代器,谓词或函数对象);</p><p>3.binary_search算法 二分查找法,注意：数据必须要有序，返回值是bool</p><p>​binary_search(开始迭代器，结束迭代器,数值)；</p><p>​binary_search（开始迭代器，结束迭代器,对象，函数对象）；</p><p>​注意：存储对象，如果使用less，那么数据要是升序,并且要重载&lt;，greater这需要数据是降序，并且要重载&gt;</p><p>4.count 统计元素个数</p><p>​count（开始迭代器，结束迭代器,数值）；</p><p>​count（开始迭代器，结束迭代器，谓词或函数对象）；</p><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>1.merge算法 容器元素合并，并存储到另一容器中</p><p>​1.如果数据是升序，那么第六个参数就不用写</p><p>​merge(开始迭代器1，结束迭代器1，开始迭代器2，结束迭代器2，目标开始迭代器)；</p><p>​2.如果数据是降序，那么第六个参数就要写greater&lt;int&gt;()</p><p>​merge(开始迭代器1，结束迭代器1，开始迭代器2，结束迭代器2，目标开始迭代器，greater&lt;int&gt;())；</p><p>2.sort算法 容器元素排序</p><p>​1.sort(开始迭代器，结束迭代器)；</p><p>​2.存储的是对象时,sort(开始迭代器，结束迭代器,函数对象)；</p><p>3.random_shuffle：洗牌</p><p>​定义随机种子：srand((unsigned int)time(NULL));</p><p>​random_shuffle（开始迭代器，结束迭代器）</p><p>4.reverse算法 反转指定范围的元素</p><p>​reverse（开始迭代器，结束迭代器）</p><h2 id="拷贝和替换算法"><a href="#拷贝和替换算法" class="headerlink" title="拷贝和替换算法"></a>拷贝和替换算法</h2><p>1.copy：拷贝</p><p>​copy(源开始迭代器，源结束迭代器，目标开始迭代器)；</p><p>2.replace算法 将容器内指定范围的旧元素修改为新元素，replace_if算法 将容器内指定范围满足条件的元素替换为新元素</p><p>​1.replace（开始迭代器，结束迭代器，旧值，新值）；</p><p>​2.replace_if(开始迭代器，结束迭代器,谓词,新值)；</p><p>3.swap，交换容器</p><p>​swap(容器1，容器2)；</p><h2 id="算术生成算法"><a href="#算术生成算法" class="headerlink" title="算术生成算法"></a>算术生成算法</h2><p>1.accumulate算法 计算容器元素累计总和</p><p>​1.int ret&#x3D;accumulate（开始迭代器，结束迭代器，数值）；&#x2F;&#x2F;第三个参数是在总和上再加上0</p><p>​2.int ret&#x3D;accumulate(开始迭代器，结束迭代器，数值,函数对象)；&#x2F;&#x2F;针对存储对象</p><p>2.fill算法 向容器中添加元素</p><p>​1.要开辟容器的空间.v.resize(10);</p><p>​2.fill(开始迭代器，结束迭代器,要填充的数值)</p><h2 id="集合算法"><a href="#集合算法" class="headerlink" title="集合算法"></a>集合算法</h2><p>1.注意:两个集合必须是有序序列</p><p>2.set_intersection算法 求两个集合的交集</p><p>​set_intersection（源开始迭代器1，源结束迭代器1，源开始迭代器2，源结束迭代器2，,目标开始迭代器）；</p><p>3.set_union算法 求两个set集合的并集</p><p>​set_union（源开始迭代器1，源结束迭代器1，源开始迭代器2，源结束迭代器2，,目标开始迭代器）；</p><p>4.set_difference算法 求两个set集合的差集<br>&#x2F;&#x2F;假如A集合有1,2,3,4,5 B集合有2,3,4,5,6 A集合减B集合的结果就是1</p><p>​set_difference（源开始迭代器1，源结束迭代器1，源开始迭代器2，源结束迭代器2，,目标开始迭代器）；</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unity初级知识</title>
      <link href="/2023/09/28/unity%E5%88%9D%E7%BA%A7%E7%9F%A5%E8%AF%86(%E9%9D%A2%E8%AF%95)/"/>
      <url>/2023/09/28/unity%E5%88%9D%E7%BA%A7%E7%9F%A5%E8%AF%86(%E9%9D%A2%E8%AF%95)/</url>
      
        <content type="html"><![CDATA[<h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><p>10个</p><p>Awake –&gt;OnEnable–&gt; Start –&gt; FixedUpdate–&gt; Update–&gt; LateUpdate –&gt;OnGUI –&gt; Reset –&gt; OnDisable –&gt; OnDestroy</p><p>Awake最先执行。Awake函数仅执行一次;如果游戏对象(即gameObject)的初始状态为关闭状态，那么运行程序,Awake函数不会执行;如果游戏对象的初始状态为开启状态,那么Awake函数会执行；对象初始化之后第一调用的函数就是Awake；而Start是在对象初始化后，第一次Update之前调用的，在 Start中进行初始化不是很安全，因为它可能被其他自定义的函数抢先。</p><p>Update是在<strong>每次渲染新的一帧的时候才会调用</strong>，FixedUpdate，是在固定的时间间隔执行，不受游戏帧率（fps）的影响 ，FixedUpdate的时间间隔可以在项目设置中更改，Edit-&gt;Project Setting-&gt;time 找到Fixed timestep。就可以修改了.</p><p>FixedUpdate，<strong>每固定帧绘制时执行一次</strong>，和 update 不同的是 FixedUpdate 是渲染帧执行，如果你的渲染效率低下的时候FixedUpdate 调用次数就会跟着下降。FixedUpdate<strong>比较适用于物理引擎的计</strong>算，因为是跟每帧渲染有关。Update 就比较适合做控制。</p><p>LateUpdate,，是在所有 update 结束后才调，<strong>比较适合用于命令脚本的执行</strong>。官网上例子是摄像机的跟随，都是在所有 update 操作完才跟进摄像机，不然就有可能出现摄像机已经推进了，但是视角里还未有角色的空帧出现。</p><h3 id="List的底层实现"><a href="#List的底层实现" class="headerlink" title="List的底层实现"></a>List的底层实现</h3><p><strong>List底层是用数组实现的</strong>，每天添加元素时会确保数组的空间和容量，每次扩容为2的指数，移除时会调用RemoveAt 来移除，RemoveAt里面用的是 Array.Copy 来拷贝数组，从index处之后的元素往前移一位。时间复杂度为O(N)线性时间。清零时容量也会设置为0，排序采用快速排序。</p><p>List 源码用数组实现的，常用接口的时间复杂度为线性时间，多次元素增加，扩容方式为2的指数，如果元素数量有65个，则扩容（64*2）128，造成大量的内存空间的浪费。<br>没有对多线程做任何的加锁安全处理，无法处理并发情况下_size++ 的执行顺序，因此在多线程使用的时候 要进行加锁等安全处理操作。List 兼容性强，但效率并不高。</p><h3 id="Dictionary的底层实现"><a href="#Dictionary的底层实现" class="headerlink" title="Dictionary的底层实现"></a>Dictionary的底层实现</h3><p>Dictionary的key和value是通过hash函数进行映射的，根据key获取hash值，把一个对象转换成唯一且确定值的函数就叫做哈希函数，每一个hash值都对应一个桶用于存放一个实体对象，但是不同的hashcode有可能对应同一个hash桶，这样会产生冲突，所以用拉链法来解决冲突问题，一个hash桶会类似一个链表，将冲突的实体存储在里面。<br>初始化Hash桶数量的时候，若未自定义数量，首次分配3个。如果我们自定义了数量，自定义的值会再根据primes数组进行计算，得出到底使用多大的桶数量。</p><h3 id="MVC的理解"><a href="#MVC的理解" class="headerlink" title="MVC的理解"></a>MVC的理解</h3><p>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。</p><p>Model（模型） - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</p><p>View（视图） - 视图代表模型包含的数据的可视化。</p><p>Controller（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</p><p>为什么要使用MVC</p><ul><li><p>多个视图能共享一个模型。同一个模型可以被不同的视图重用，大大提高了代码的可重用性。</p></li><li><p>由于MVC的三个模块相互独立，改变其中一个不会影响其他两个，所以依据这种设计思想能构造良好的松耦合的构件。</p></li><li><p>控制器提高了应用程序的灵活性和可配置性。控制器可以用来联接不同的模型和视图去完成用户的需求，这样控制器可以为构造应用程序提供强有力的手段</p></li></ul><p>M代表模型，V代表试图，C代表控制器，这是一种用于应用程序分层开发的模式，视图提供数据的可视化，而控制器可以作用于这两者，可以控制数据的变化和更新视图，这样可以让视图和模型分离，这样改变其中一个不会影响其他独立的部分。并且一个模型可以被多个不同的视图使用，提高了代码的复用性。同时控制器也提高了程序的灵活性和复用性。</p><h3 id="UGUI相关"><a href="#UGUI相关" class="headerlink" title="UGUI相关"></a>UGUI相关</h3><h4 id="UGUI图集有什么用"><a href="#UGUI图集有什么用" class="headerlink" title="UGUI图集有什么用"></a>UGUI图集有什么用</h4><p>UGUI图集是一种将多个纹理合并为一个组合纹理的资源。Unity 可以调用此单个纹理来发出单个绘制调用而不是发出多个绘制调用，能够以较小的性能开销一次性访问压缩的纹理。</p><p>在UGUI中即使你什么都不干，在项目打包时，Unity也会自动将你的一些小图片资源合在一张大图里面，也就是合成一张图集，但是这种默认的方式，会产生大量的Draw Call，对于性能消耗比较大而NGUI则是开发者必须要将图片资源打包成图集，然后才能使用这些图片资源因此无论是UGUI还是NGUI，掌握图集的打包都是非常重要的。</p><h4 id="你做过的项目中，图集是如何分类的"><a href="#你做过的项目中，图集是如何分类的" class="headerlink" title="你做过的项目中，图集是如何分类的"></a>你做过的项目中，图集是如何分类的</h4><h4 id="不同平台，UI贴图的资源格式是怎么选择的"><a href="#不同平台，UI贴图的资源格式是怎么选择的" class="headerlink" title="不同平台，UI贴图的资源格式是怎么选择的"></a>不同平台，UI贴图的资源格式是怎么选择的</h4><img src="source\UGUI和NGUI对比.png" alt="UGUI和NGUI对比"  /><h3 id="AssetBundle相关"><a href="#AssetBundle相关" class="headerlink" title="AssetBundle相关"></a>AssetBundle相关</h3><h4 id="AssetBundle有什么用"><a href="#AssetBundle有什么用" class="headerlink" title="AssetBundle有什么用"></a>AssetBundle有什么用</h4><p>AssetBundle就像一个ZIP压缩文件，里面存储着不同平台的特殊资源。使用AssetBundle管理资源，资源是和安装包分离，单独打包的。<br>一个游戏的资源一般会按照类型或是逻辑分成很多小包，游戏运行时需要用到什么资源就从对应的包中读取相应的资源。</p><p>LZMA<br>LZ4</p><h4 id="打包AssetBundle的接口叫什么"><a href="#打包AssetBundle的接口叫什么" class="headerlink" title="打包AssetBundle的接口叫什么"></a>打包AssetBundle的接口叫什么</h4><p>unity资源打包的接口，就是<strong>BuildPipeline.BuildAssetBundles函数</strong><br>其对应具体的三个参数，第一个是bundle的输出路径，下面来详细分析一下剩下的2个参数：</p><ol><li><p>BuildAssetBundleOptions</p><p>具体的参数设置，可以参看API当中的详细信息，下面主要集中说三个参数，分别对应三种压缩格式的选择。</p><ol><li><p>BuildAssetBundleOptions.None :</p><p>采用LZMA的压缩格式， 这种压缩格式要求资源在使用之前需要全部被解压，这就会带来在使用一个极小的文件的时候会额外带来较长的解压时间消耗。比较蛋疼的是，一旦这个bundle被解压之后，在磁盘上又会以LZ4的格式重新压缩，LZ4的压缩格式，在使用资源的时候不需要全部解压。<br>这种压缩格式主要用于一个bundle中资源都需要被加载的时候，例如打包角色或者场景资源的时候，这种压缩格式在初始化下载的时候被推荐(更小的包体)，这些资源在被解压后，又会以LZ4的格式被缓存。</p></li><li><p>BuildAssetBundleOptions.UncompressedAssetBundle:</p><p>无压缩的打包，加载的文件更大，但是时间更快(省去解压的时间)</p></li><li><p>BuildAssetBundleOptions.ChunkBasedCompression:</p><p>采用LZ4的压缩格式，相比于LZMA而言文件体积更大，但是不要求在使用之前整个bundle都被解压。LZ4使用chunk based 算法，这就运行文件以chunk或者piece的方式加载，只解压一个chunk文件，而无需解压bundle中其余不相关的chunk。</p></li></ol></li><li><p>BuildTarget</p><p>也就是当前资源需要被使用的平台的分类，在打完资源后，会发现文件夹中有更多的文件，一般是2*(n+1), 对于各个不同的资源，都会有一个manifest文件，一般是 bundlename+”.manifest”，除此之外，还会有一个额外的manifest文件，对应不同的平台会有不同的额外的manifest（这是一个总体的manifest文件）。</p></li></ol><h4 id="如何卸载AssetBundle"><a href="#如何卸载AssetBundle" class="headerlink" title="如何卸载AssetBundle ?"></a>如何卸载AssetBundle ?</h4><p><code>AssetBundle.Unload(bool )</code></p><p>如何卸载AssetBundle Load出来的Asset ?</p><p><code>GameObject.Destroy()</code><br><code>GameObject.DestroyImmediate()</code><br><code>Resources.UnloadAsset()</code><br><code>Resources.UnloadUnusedAssets()</code></p><h3 id="Unity中，有哪些资源加载的方式"><a href="#Unity中，有哪些资源加载的方式" class="headerlink" title="Unity中，有哪些资源加载的方式"></a>Unity中，有哪些资源加载的方式</h3><p>Unity对资源进行加载和卸载主要有两种方式:<strong>Resources和AssetBundle</strong></p><ol><li>直接在脚本中public一个对象，然后在监视器面板进行赋值</li><li>直接在程序中进行find查找</li><li>Resource.load<br>Resources.Load 加载的资源必须放在  Resources 文件夹下。游戏打包时，Resources文件夹下文件会被全部压缩打包并进行加密，并且 Resources文件夹的目标将不存在，只能通过 Resources.Load 进行加载。 </li><li>把资源打成Assetbudle，然后用的时候load进来<br>assetbundle就是对资源的打包处理，同时这种资源格式便于从互联网上下载<br>使用 WWW 或 UnityWebRequest 或者 AssetBundl.LoadFromFile 或者 Resources.Load 加载到 AssetBundle 后。还需要通过 AssetDataBundle 对象调用 LoadAsset 方法，将 包 加载为具体的 资源类型对象。如果是 GameObject 对象，可以通过 Instantiate 在场景创建具体的 GameObject。</li></ol><h3 id="什么是drawcall-如何优化drawcall？"><a href="#什么是drawcall-如何优化drawcall？" class="headerlink" title="什么是drawcall ?如何优化drawcall？"></a>什么是drawcall ?如何优化drawcall？</h3><p>它是CPU调用底层图形接口的操作。DrawCall就是一个让<strong>CPU调用图形接口在屏幕上绘制对应的东西</strong>的指令。</p><p>UI上的DrawCall通常打个图集。</p><p>根据情况选择合适的资源合批方式：</p><ol><li>Static Batching（静态批次），场景中的物体可以进行静态合批，对于没有移动且公用材质的物件，能有效减少drawcall。一般来说，静态批次比动态批次更有效，但它会占用更多的内存，也会消耗更少的CPU。其原理是把静态批处理的模型合并到一个新的网格中。(勾选File-BuildSettins-PlayerSettings-OtherSettings-StaticBatching)</li><li>Dynamic Batching（动态批次），当物件使用相同的材质，并且满足一定的条件时，Unity会自动合并物件来减少draw call。Dynamic batching 是自动做的，不需要教你做其他的事情。其原理是每一帧把进行批处理的模型网络进行合并,再把合并后模型数据传递给GPU,条件是有模型顶点数量限制。(勾选File-BuildSettins-PlayerSettings-OtherSettings-DynamicBatching)</li><li>GPU Instancing合批,可以为不同的实例提供不同的旋转比例颜色等特性，不能将Skinned Mesh Renderer应用到实例化，并不是所有平台和API都支持实例化。</li><li>直接用代码合并，获取物体的MeshRenderer,重新生成一个material然后赋值给新物体，将旧物体隐藏。</li></ol><h3 id="什么是overdraw-如何优化overdraw"><a href="#什么是overdraw-如何优化overdraw" class="headerlink" title="什么是overdraw ?如何优化overdraw ?"></a>什么是overdraw ?如何优化overdraw ?</h3><p>Overdraw是指屏幕上的<strong>某个像素在同一帧的时间内被绘制了多次</strong>。<br>UWA分析报告中，以总填充总数来表达一帧内渲染的像素数量，过多Overdraw可能会引起GPU过载，影响动画的播放和界面响应速度。</p><p>可以通过在Scene窗口里设置OverDraw模式来查看，场景中越亮的地方表示overdraw越高。</p><p>降低overdraw,可以做如下优化：</p><p>1：禁用不可见的面板，比如当打开一个系统时如果完全挡住了另外一个系统，则可以将被遮挡住的系统面板禁用。</p><p>2：不要使用空的Image做按键响应。在Unity中RayCast使用Graphi作为基本元素来检测touch。在很多项目中，很多同学使用空的image并将alpha设置为0来接收touch事件，这样会产生不必要的overdraw。可以实现一个只在逻辑上响应Raycast但是不参与绘制的组件即可。</p><h3 id="什么是GC-如何优化GC"><a href="#什么是GC-如何优化GC" class="headerlink" title="什么是GC?如何优化GC?"></a>什么是GC?如何优化GC?</h3><p>GC是为了避免内存溢出而产生的垃圾回收机制</p><p>避免：<br>1）减少 new 产生对象的次数<br>2）使用公用的对象（静态成员）<br>3）将 String 换为 StringBuilder</p><h3 id="在xLua-toLua中，Lua是如何与C-交互的-如何优化Lua与C-交互的效率"><a href="#在xLua-toLua中，Lua是如何与C-交互的-如何优化Lua与C-交互的效率" class="headerlink" title="在xLua&#x2F;toLua中，Lua是如何与C#交互的?如何优化Lua与C#交互的效率?"></a>在xLua&#x2F;toLua中，Lua是如何与C#交互的?如何优化Lua与C#交互的效率?</h3><h4 id="Lua-Call-C"><a href="#Lua-Call-C" class="headerlink" title="Lua Call C#"></a>Lua Call C#</h4><p>Wrap 方式:<br>首先生成 C# 源文件所对应的Wrap文件，由 Lua 文件调用 Wrap 文件，再由 Wrap 文件调用 C# 文件<br>反射方式：<br>当索引系统 API、dll 库或者第三方库时，如果无法将代码的具体实现进行代码生成，可采用此方式实现交互。<br>缺点:执行效率低。</p><p>过程</p><p>lua-&gt;wrap-&gt;C#<br>先生成 Wrap 文件（中间文件&#x2F;适配文件）或者编写 C# 源文件所对应的 c 模块， wrap 文件把字段方法，然后将源文件内容通过 Wrap 文件或者 C 模块把字段方法注册到 lua 虚拟机中（解释器 luajit ），然后 lua 通过 wrap 去调用这个模块的函数。</p><h4 id="C-Call-Lua"><a href="#C-Call-Lua" class="headerlink" title="C# Call Lua"></a>C# Call Lua</h4><p>虚拟栈操作方式<br>C# 把请求或数据放在栈顶，然后 lua 从栈顶取出该数据，在 lua 中做出相应处理（查询，改变），然后把处理结果放回栈顶，最后 C# 再从栈顶取出 lua 处理完的数据，完成交互。<br>或者在 config 文件中添加相应类型也可以</p><p>过程</p><p>C#-&gt;Bridge-&gt;dll-&gt;Lua OR C#-&gt;dll-&gt;Lua<br>C# 生成 Bridge 文件， Bridge 调 dll 文件（ dll 是用 C 写的库），先调用 lua 中 dll 文件，由 dll 文件执行lua代码</p><h4 id="交互优化"><a href="#交互优化" class="headerlink" title="交互优化"></a>交互优化</h4><ul><li>尽量不要在 lua 中传递 Unity 中的类，尽量只传递int,float,double 类型<br>解决方法：在 C# 中封装方法 Unity 类型的赋值，使用 id（int） 代表对应 object 的传递</li><li>调用的 C# 方法参数数量尽量少与4个</li><li>C# 方法尽量为静态方法（减少 lua gc ）</li><li>在 lua 中调用 C# 方法获取数据时，其方法参数尽量使用 out 关键字（将表查找转换为对栈访问）</li></ul><h4 id="没有生成静态代码，反射调用"><a href="#没有生成静态代码，反射调用" class="headerlink" title="没有生成静态代码，反射调用"></a>没有生成静态代码，反射调用</h4><ul><li>a.把C#对象映射到lua的userdata,userdata只保留一个信息，就是这个对象在C#侧的objects_pool的索引</li><li>b.根据obj获取其ClassType，根据type与调用函数（位置栈里边index2），通过反射获取实际执行的MethodInfo</li><li>c.根据MethodInfo构造一个满足LuaCSFunction的delegate并压栈</li><li>d.delegate构造，根据MethodInfo，取得args信息，根据args从栈中取出赋值，反射调用函数后把结果压栈；GetAsType是把栈上Lua对象转换成指定类型的C#对象，PushCsObject是把一个C#对象按映射规则压到Lua栈上</li><li>e.将统一的反射调用方法objectIndex设置为所有C#对象的metatable的__index</li></ul><p>反射带来的问题：</p><ul><li><strong>a.拆装箱开销</strong></li><li><strong>b.stripping引用的反射失效</strong></li><li><strong>c.泛型方法，触发JIT，引起IOS异常</strong></li><li><strong>d.失去静态检查好处</strong></li></ul><h4 id="非反射做法"><a href="#非反射做法" class="headerlink" title="非反射做法"></a>非反射做法</h4><p>用反射的方式，用工具生成要用在lua侧调用的类的，类似反射调用代码（见lua_call_Csharp示例），只是去除了里边的反射内容，因为针对每个类是确定的，不需要用反射</p><p>静态代码的问题：</p><ul><li>a.生成时，有宏定义的方法，如Editor会有问题</li><li>b.生成的代码，增大编译后的代码大小，尤其il2cpp，相应地增加包体大小</li></ul><h3 id="进程、线程和协程"><a href="#进程、线程和协程" class="headerlink" title="*进程、线程和协程"></a>*进程、线程和协程</h3><p>进程是程序执行时的一个实例，即它是程序已经执行到何种程度的数据结构的汇集。从内核的观点看，进程的目的就是担当分配系统资源（CPU时间、内存等）的基本单位。<br>线程是进程的一个执行流，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。</p><p><strong>进程——资源分配的最小单位，线程——程序执行的最小单位</strong></p><p>进程拥有自己独立的堆和栈，既<strong>不共享堆，亦不共享栈</strong>，进程由操作系统调度。<br>线程拥有自己独立的栈和共享的堆，<strong>共享堆，不共享栈</strong>，线程亦由操作系统调度(标准线程是的)。<br>协程和线程一样<strong>共享堆，不共享栈</strong>，协程由程序员在协程的代码里显示调度。</p><p><strong>一个应用程序一般对应一个进程，一个进程一般有一个主线程，还有若干个辅助线程，线程之间是平行运行的，在线程里面可以开启协程，让程序在特定的时间内运行。</strong></p><p>协程和线程的区别是：<strong>协程避免了无意义的调度，由此可以提高性能，但也因此，程序员必须自己承担调度的责任，同时，协程也失去了标准线程使用多CPU的能力。</strong></p><p>在<strong>任一指定时刻只有一个协程在运行</strong><br>例子：假设有一个操作系统，是单核的，系统上没有其他的程序需要运行，有两个线程 A 和 B ，A 和 B 在单独运行时都需要 10 秒来完成自己的任务，而且任务都是运算操作，A B 之间也没有竞争和共享数据的问题。<strong>现在 A B 两个线程并行，操作系统会不停的在 A B 两个线程之间切换，达到一种伪并行的效果</strong>，假设切换的频率是每秒一次，切换的成本是 0.1 秒(主要是栈切换)，总共需要 20 + 19 * 0.1 &#x3D; 21.9 秒。如果使用协程的方式，可以先运行协程 A ，A 结束的时候让位给协程 B ，只发生一次切换，总时间是 20 + 1 * 0.1 &#x3D; 20.1 秒。如果系统是双核的，而且线程是标准线程，那么 A B 两个线程就可以真并行，总时间只需要 10 秒，而协程的方案仍然需要 20.1 秒。 </p><p><strong>子线程是不能直接访问unity对象的，可以通过委托来访问。</strong></p><p>仅能从主线程中访问 Unity3D 的组件，对象和 Unity3D 系统调用<br>支持：如果同时你要处理很多事情或者与 Unity 的对象互动小可以用 thread,否则使用coroutine。<br>注意：C#中有 lock 这个关键字,以确保只有一个线程可以在特定时间内访问特定的对象</p><p><strong>协程的原理：</strong></p><p>协程函数的返回值时IEnumerator,它是一个迭代器，可以把它当成执行一个序列的某个节点的指针。<br>它提供了两个重要的接口，分别是Current(返回当前指向的元素)和MoveNext()(将指针向后移动一个单位，如果移动成功，则返回true)。</p><p>yield关键词用来声明序列中的下一个值或者是一个无意义的值。</p><p>如果使用yield return x(x是指一个具体的对象或者数值)的话，<br>那么MoveNext返回为true并且Current被赋值为x,如果使用yield break使得MoveNext()返回为false。<br>如果MoveNext函数返回为true意味着协程的执行条件被满足，则能够从当前的位置继续往下执行。否则不能从当前位置继续往下执行。</p><p>每次yield返回后会把后面的语句块挂起，此时会返回一个bool值判断当前协程是否结束，如果没有结束会待特定时间后继续进行协程。</p><p>使用协程的时机距离：<strong>异步加载资源</strong>的时候</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">yield return null; &#x2F;&#x2F; 下一帧再执行后续代码yield return 0; &#x2F;&#x2F;下一帧再执行后续代码yield return 6;&#x2F;&#x2F;(任意数字) 下一帧再执行后续代码yield break; &#x2F;&#x2F;直接结束该协程的后续操作yield return WWW();&#x2F;&#x2F;等待WWW操作完成后再执行后续代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><p>1、实现角色预览显示在UI上，用一个摄像机对着角色，然后绑定摄像机的TargetTexture属性，创建一个RenderTexture，把他绑定在摄像机上实现投影，再绑定到一个RawImage上面，把这个RawImage显示到场景中就可以实现角色预览</p><p>RawImage和Image的不同就在于Rawimage本质上取得就是这个资源的Texture，其他的属性它都不关心。</p><p>2.小地图的映射</p><h3 id="渲染管线"><a href="#渲染管线" class="headerlink" title="渲染管线"></a>渲染管线</h3><img src="source\渲染管线的流程.png" alt="渲染管线的流程" style="zoom:50%;" /><p>Vertex Shader：对顶点进行处理，顶点动画在这个部分进行。主要是把顶点变换到裁切空间上，</p><p>Triangel Processing：绘制三角形</p><p>Rasterization：把三角形的像素绘制出来，也就是光栅化。根据顶点位置插值化处理每个像素。</p><p>Pixel Shader：对像素进行处理，例如根据灯光做出明暗变化，根据贴图坐标去采样贴图让模型更有纹理细节。</p><p>Frame Buffer：后处理阶段，比如抗锯齿、校色、添加bloom(辉光)等</p><h2 id="C-语言部分"><a href="#C-语言部分" class="headerlink" title="C#语言部分"></a>C#语言部分</h2><ol><li><h5 id="重载和重写的区别-（99-）"><a href="#重载和重写的区别-（99-）" class="headerlink" title="重载和重写的区别 （99+）"></a>重载和重写的区别 （99+）</h5><p>1)所处位置不同 重载在同类中 重写在父子类中<br>2)定义方式不同 重载方法名相同 参数列表不同 重写方法名和参数列表都相同<br>3)调用方式不同 重载使用相同对象以不同参数调用 重写用不同对象以相同参数调用<br>4)多态时机不同 重载时编译时多态 重写是运行时多态</p><p>c#中重写用virtual和override共同实现，c++中只用加virtual修饰父类函数即可，不用必须加override</p></li><li><h5 id="面向对象的三大特点-（99-）"><a href="#面向对象的三大特点-（99-）" class="headerlink" title="面向对象的三大特点 （99+）"></a>面向对象的三大特点 （99+）</h5><p>封装、继承、多态<br>1.继承： 提高代码重用度，增强软件可维护性的重要手段，符合开闭原则。<br>2.封装： 封装是将数据和行为相结合，通过行为约束代码修改数据的程度，增强数据的安全性，属性是C#封装实现的最好体现。<br>3.多态性： 多态性是指同名的方法在不同环境下，自适应的反应出不同得表现，是方法动态展示的重要手段。</p></li><li><h5 id="简述值类型和引用类型有什么区别-（99-）"><a href="#简述值类型和引用类型有什么区别-（99-）" class="headerlink" title="简述值类型和引用类型有什么区别 （99+）"></a>简述值类型和引用类型有什么区别 （99+）</h5><p>1.内存中的位置：值类型存储在<strong>内存栈</strong>中，引用类型数据存储在内存堆中，而内存单元中存放的<br>是堆中存放的地址。<br>2.<strong>存取速度</strong>：值类型存取快，引用类型存取慢。<br>3.值类型表示<strong>实际数据</strong>，引用类型表示指<strong>向存储在内存堆中的数据的指针和引用</strong>。<br>4.栈的内存是<strong>自动释放</strong>的，堆内存是.NET 中会<strong>由 GC来自动释放</strong>。<br>5.值类型继承自 System.ValueType,引用类型继承自 System.Object。</p></li><li><h5 id="请简述private，public，protected，internal的区别-（99-）"><a href="#请简述private，public，protected，internal的区别-（99-）" class="headerlink" title="请简述private，public，protected，internal的区别 （99+）"></a>请简述private，public，protected，internal的区别 （99+）</h5><p>public：对任何类和成员都公开，无限制访问<br>private：仅对该类公开<br>protected：对该类和其派生类公开<br>internal：只能在包含该类的程序集中访问该类<br>protected internal：protected + internal</p></li><li><h5 id="C-中所有引用类型的基类是什么"><a href="#C-中所有引用类型的基类是什么" class="headerlink" title="C#中所有引用类型的基类是什么"></a>C#中所有引用类型的基类是什么</h5><p>引用类型的基类是 System.Object<br>值类型的基类是 System.ValueType，同时，值类型也隐式继承自 System.Object</p></li><li><h5 id="请简述-ArrayList-和-List的主要区别"><a href="#请简述-ArrayList-和-List的主要区别" class="headerlink" title="请简述 ArrayList 和 List的主要区别"></a>请简述 ArrayList 和 List的主要区别</h5><p>ArrayList 不带泛型 数据类型丢失<br>List&lt;T&gt; 带泛型 数据类型不丢失<br>ArrayList需要装箱拆箱 List&lt;T&gt;不需要</p></li><li><h5 id="请简述-GC（垃圾回收）产生的原因，并描述如何避免？"><a href="#请简述-GC（垃圾回收）产生的原因，并描述如何避免？" class="headerlink" title="请简述 GC（垃圾回收）产生的原因，并描述如何避免？"></a>请简述 GC（垃圾回收）产生的原因，并描述如何避免？</h5><p>GC 为了避免内存溢出而产生的回收机制<br>避免：<br>1）减少 new 产生对象的次数<br>2）使用公用的对象（静态成员）<br>3）将 String 换为 StringBuilder</p></li><li><h5 id="请描述-Interface-与抽象类之间的不同"><a href="#请描述-Interface-与抽象类之间的不同" class="headerlink" title="请描述 Interface 与抽象类之间的不同"></a>请描述 Interface 与抽象类之间的不同</h5><p>1.接口不是类 不能实例化 抽象类可以间接实例化<br>2.接口是完全抽象 抽象类为部分抽象<br>3.接口可以多继承 抽象类是单继承</p></li><li><p>下列代码在运行中会产生几个临时对象？</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">string a &#x3D; new string (&quot;abc&quot; ); &#x2F;&#x2F;C#中会出错（Java 中倒是可行）。应该这样初始化：string b &#x3D; new string(new char[]&#123;‘a’,‘b’,‘c’&#125;);a &#x3D; ( a.ToUppec() + &quot;123&quot;).Substring(0,2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>1.“abc”<br>2.a.ToUpper()<br>3.“123”<br>4.a.ToUpper()+“123”</p></li><li><p>下列代码在运行中会发生什么问题？如何避免？</p></li></ol>   <pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">List&lt;int&gt;ls&#x3D;new List&lt;int&gt;(new int[]&#123;1,2,3,4,5&#125;);foreach (int item in ls)&#123;    Console.WriteLine(item*item);    ls.Remove(item);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​会产生运行时错误，因为 foreach 是只读的。不能一边遍历一边修改。</p><ol start="11"><li><h5 id="请简述关键字-Sealed-用在类声明和函数声明时的作用"><a href="#请简述关键字-Sealed-用在类声明和函数声明时的作用" class="headerlink" title="请简述关键字 Sealed 用在类声明和函数声明时的作用"></a>请简述关键字 Sealed 用在类声明和函数声明时的作用</h5><p>类声明时可防止其他类继承此类，在方法中声明则可防止派生类重写此方法。</p></li><li><h5 id="反射的实现原理？"><a href="#反射的实现原理？" class="headerlink" title="反射的实现原理？"></a>反射的实现原理？</h5><p>可以在加载程序运行时，动态获取和加载程序集，并且可以获取到程序集的信息<br>反射即在运行期动态获取类、对象、方法、对象数据等的一种重要手段<br>主要使用的类库：System.Reflection<br>核心类：<br>1.Assembly描述了程序集<br>2.Type描述了类这种类型<br>3.ConstructorInfo描述了构造函数<br>4.MethodInfo描述了所有的方法<br>5.FieldInfo描述了类的字段<br>6.PropertyInfo描述类的属性<br>通过以上核心类可在运行时动态获取程序集中的类，并执行类构造产生类对象，动态获取对象的字段或属性值，更可以动态执行类方法和实例方法等。</p></li><li><h5 id="Net-与-Mono-的关系？"><a href="#Net-与-Mono-的关系？" class="headerlink" title=".Net 与 Mono 的关系？"></a>.Net 与 Mono 的关系？</h5><p>.Net是一个语言平台，Mono为.Net提供集成开发环境，集成并实现了.NET的编译器、CLR 和基础类库，使得.Net既可以运行在windows也可以运行于 linux，Unix，Mac OS 等。</p></li><li><h5 id="在类的构造函数前加上-static-会报什么错-为什么"><a href="#在类的构造函数前加上-static-会报什么错-为什么" class="headerlink" title="在类的构造函数前加上 static 会报什么错?为什么?"></a>在类的构造函数前加上 static 会报什么错?为什么?</h5><p>构造函数格式为 public+类名如果加上 static 会报错（静态构造函数不能有访问修饰符）<br>原因：<strong>静态构造函数不允许访问修饰符</strong>，也不接受任何参数；无论创建多少类型的对象，静态构造函数只执行一次；运行库创建类实例或者首次访问静态成员之前，运行库调用静态构造函数；静态构造函数执行先于任何实例级别的构造函数；显然也就无法使用 this 和 base 来调用构造函数。</p></li><li><h5 id="C-String-类型比-stringBuilder-类型的优势是什么"><a href="#C-String-类型比-stringBuilder-类型的优势是什么" class="headerlink" title="C# String 类型比 stringBuilder 类型的优势是什么?"></a>C# String 类型比 stringBuilder 类型的优势是什么?</h5><p>如果是处理字符串的话，用<strong>string 中的方法每次都需要创建一个新的字符串对象并且分配新的内存地址</strong>，而 stringBuilder 是在原来的内存里对字符串进行修改，所以在字符串处理<br>方面还是建议用 stringBuilder 这样比较节约内存。但是 string 类的方法和功能仍然还是比 stringBuilder 类要强。<br>string 类由于具有不可变性（即对一个 string 对象进行任何更改时，其实都是创建另外一个 string 类的对象），所以当需要频繁的对一个 string 类对象进行更改的时候，建议使用StringBuilder 类，StringBuilder 类的原理是首先在内存中开辟一定大小的内存空间，当对此 StringBuilder 类对象进行更改时， 如果内存空间大小不够， 会对此内存空间进行扩充，而不是重新创建一个对象，这样如果对一个字符串对象进行频繁操作的时候，不会造成过多的内存浪费，其实本质上并没有很大区别，都是用来存储和操作字符串的，唯一的区别就在于性能上。<br>String 主要用于公共 API，通用性好、用途广泛、读取性能高、占用内存小。<br>StringBuilder 主要用于拼接 String，修改性能好。<br>不过现在的编译器已经把 String 的 + 操作优化成 StringBuilder 了， 所以一般用String 就可以了<br>String 是不可变的，所以天然线程同步。<br>StringBuilder 可变，非线程同步。</p><p><strong>string会造成垃圾内存的浪费，虽然StringBuilder创建会使用更多的内存，但是避免了反复的创建string造成内存的浪费，同时节约了cpu的性能。</strong></p></li><li><p>C# 函数 Func(string a, string b)用 Lambda 表达式怎么写?</p><p>(a,b) &#x3D;&gt; {};</p></li><li><p>C#中有哪些常用的容器类，各有什么特点。</p><p>List,HashTable,Dictionary,Stack,Queue<br>List：索引泛型容器 访问速度快 修改速度慢<br>HashTable&#x2F;Dictionary：散列表格式 查询效率高 空间占用较大<br>Stack：后进先出<br>Queue: 先进先出</p></li><li><h5 id="C-中常规容器和泛型容器有什么区别，哪种效率高？"><a href="#C-中常规容器和泛型容器有什么区别，哪种效率高？" class="headerlink" title="C#中常规容器和泛型容器有什么区别，哪种效率高？"></a>C#中常规容器和泛型容器有什么区别，哪种效率高？</h5><p><strong>不带泛型的容器需要装箱和拆箱操作</strong> 速度慢 所以泛型容器效率更高 数据类型更安全</p></li><li><p>有哪些常见的数值类？</p><p>简单值类型–包括 整数类型(int)、实数类型(int)、字符类型(char)、布尔类型(bool)<br>复合值类型–包括 结构类型(struct)、枚举类型(enum)</p></li><li><h5 id="C-中委托和接口有什么区别？各用在什么场合"><a href="#C-中委托和接口有什么区别？各用在什么场合" class="headerlink" title="C#中委托和接口有什么区别？各用在什么场合?"></a>C#中委托和接口有什么区别？各用在什么场合?</h5><p>接口（interface）是约束类应该具备的功能集合，约束了类应该具备的功能，使类从千变万化的具体逻辑中解脱出来，便于类的管理和扩展，同时又合理解决了类的单继承问题。<br>C#中的委托是约束方法集合的一个类，可以便捷的使用委托对这个方法集合进行操作。<br>在以下情况中使用接口：<br>1.无法使用继承的场合<br>2.完全抽象的场合<br>3.多人协作的场合<br>以上等等<br>在以下情况中使用委托：多用于事件处理中</p></li><li><p>C#中unsafe关键字是用来做什么的？什么场合下使用？</p><p>非托管代码才需要这个关键字 一般用在<strong>带指针操作</strong>的场合</p></li><li><h5 id="C-中ref和out关键字有什么区别？"><a href="#C-中ref和out关键字有什么区别？" class="headerlink" title="C#中ref和out关键字有什么区别？"></a>C#中ref和out关键字有什么区别？</h5><p>ref修饰参数，表示进行<strong>引用传递</strong>，out修饰参数也表示进行引用传递，但传递的引用只为带回返回值<br>ref又进又出 out不进只出</p></li><li><p>For，foreach，Enumerator.MoveNext的使用，与内存消耗情况</p><p>for 循环可以通过索引依次进行遍历，foreach和Enumerator.MoveNext通过迭代的方式进行遍历。内存消耗上本质上并没有太大的区别。但是在Unity中的Update中，一般不推荐使用foreach 因为会遗留内存垃圾。</p></li><li><p>函数中多次使用string的+&#x3D;处理，会产生大量内存垃圾（垃圾碎片），有什么好的方法可以解决。</p><p>通过StringBuilder那进行append，这样可以减少内存垃圾</p></li><li><p>当需要频繁创建使用某个对象时，有什么好的程序设计方案来节省内存？</p><p>设计单例模式进行创建对象或者使用对象池</p></li><li><p>JIT 和AOT区别</p><p>Just-In-Time - 实时编译<br>执行慢 安装快 占空间小一点<br>Ahead-Of-Time - 预先编译<br>执行快 安装慢 占内存占外存大</p></li><li><p>给定一个存放参数的数组，重新排列数组</p><p>void SortArray(Array arr){Array.Sort(arr);}</p></li><li><p>Foreach循环迭代时，若把其中的某个元素删除，程序报错，怎么找到那个元素？以及具体怎么处理这种情况？(注：Try…Catch捕捉异常，发送信息不可行)</p><p>foreach 不能进行元素的删除，因为迭代器会锁定迭代的集合，解决方法：记录找到索引或者key值，迭代结束后再进行删除。</p></li><li><p>GameObject a&#x3D;new GameObject() GameObject b&#x3D;a 实例化出来了A，将A赋给B，现在将B删除，问A还存在吗？</p><p>存在，b删除只是将它在栈中的内存删除，而A对象本身是在堆中，所以A还存在</p></li></ol><h2 id="Unity编辑器基础"><a href="#Unity编辑器基础" class="headerlink" title="Unity编辑器基础"></a>Unity编辑器基础</h2><ol><li><h5 id="请描述游戏动画有几种，以及其原理。"><a href="#请描述游戏动画有几种，以及其原理。" class="headerlink" title="请描述游戏动画有几种，以及其原理。"></a>请描述游戏动画有几种，以及其原理。</h5><p>主要有关节动画、单一网格模型动画(关键帧动画)、骨骼动画。<br><strong>关节动画</strong>把角色分成若干独立部分，<strong>一个部分对应一个网格模型</strong>，部分的动画连接成一个整体的动画，角色比较灵活 Quake2 中使用了这种动画。<br><strong>单一网络模型动画</strong>由一个完整的网格模型构成， 在动画序列的关键帧里<strong>记录各个顶点的原位置及其改变量</strong>，然后插值运算实现动画效果，角色动画较真实。<br><strong>骨骼动画</strong>，广泛应用的动画方式，集成了以上两个方式的优点，骨骼按角色特点组成一定的层次结构，由关节相连，可做相对运动，皮肤作为单一网格蒙在骨骼之外，决定角色的外观。皮肤网格每一个顶点都会受到骨骼的影响，从而实现完美的动画。（骨骼动画是由关节动画发展而来的，如今基本都使用骨骼动画来实现角色动画）</p></li><li><h5 id="物体发生碰撞的必要条件"><a href="#物体发生碰撞的必要条件" class="headerlink" title="物体发生碰撞的必要条件"></a>物体发生碰撞的必要条件</h5><p>双方都必须带有collider，且其中一方拥有rigidbody和CharacterController</p></li><li><p>GUI与UGUI的优点和缺点</p><p>GUI不方便控制，UGUI所见即所得，方便控制。GUI使用在生命周期函数OnGUI中使用，脚本来书写控制。UGUI使用Canvas画布和事件系统。UGUI适应屏幕上比GUI简单。</p></li><li><p>一个场景放置多个carmera并同时处于活动状态，会发生什么</p><p>实际看到的画面由多个 camera 的画面组成，由 depth、Clear Flag、Culling Mask 都会影响最终合成效果。</p></li><li><p>U3D 中用于记录节点空间几何信息的组件名称，及其父类名称</p><p>Transform，父类是 Component</p></li><li><p>为何大家都在移动设备上寻求 U3D 原生 GUI 的替代方案</p><p>不美观，OnGUI 很耗费时间，使用不方便 ，DrawCall</p></li><li><p>请简述如何在不同分辨率下保持 UI 的一致性</p><p>NGUI 很好的解决了这一点，屏幕分辨率的自适应性，原理就是计算出屏幕的宽高比跟原来的预设的屏幕分辨率求出一个对比值，然后修改摄像机的 size。</p></li><li><p>为什么 dynamic font 在 unicode 环境下优于 static font</p><p>Unicode 是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。使用动态字体时，Unity 将不会预先生成一个与所有字体的字符纹理。当需要支持亚洲语言或者较大的字体的时候，若使用正常纹理，则字体的纹理将非常大。</p></li><li><h5 id="Render-的作用？描述-MeshRender-和-SkinnedMeshRender-的关系与不同"><a href="#Render-的作用？描述-MeshRender-和-SkinnedMeshRender-的关系与不同" class="headerlink" title="Render 的作用？描述 MeshRender 和 SkinnedMeshRender 的关系与不同"></a>Render 的作用？描述 MeshRender 和 SkinnedMeshRender 的关系与不同</h5><p>Mesh 就是指<strong>模型的网格</strong>（同名组件是用于调整网格属性的），MeshFilter 一般是用于<strong>获得模型网格</strong>的组件，而 MeshRender 是用于把<strong>网格渲染出来</strong>的组件</p></li><li><p>简述 SkinnedMesh 的实现原理</p><p>Skinned Mesh 中文一般称作<strong>骨骼蒙皮动画</strong>.这种动画中包含骨骼（ Bone ）和蒙皮 (Skinned Mesh) 两个部分， Bone 的层次结构和关节动画类似， Mesh 则和关节动画不同：关节动画中是使用多个分散的 Mesh, 而 Skinned Mesh 中 Mesh 是一个整体，也就是说只有一个 Mesh, 实际上如果没有骨骼让 Mesh 运动变形， Mesh 就和静态模型一样了。Skinned Mesh 技术的精华在于蒙皮，所谓的皮并不是模型的贴图。而是 Mesh 本身，蒙皮是指将 Mesh 中的顶点附着（绑定）在骨骼之上，而且每个顶点可以被多个骨骼所控制，这样在关节处的顶点由于同时受到父子骨骼的拉扯而改变位置就消除了裂缝。可以理解为具有蒙皮信息的 Mesh 或可当做皮肤用的 Mesh ，这个皮肤就是 Mesh 。而为了有皮肤功能， Mesh 还需要蒙皮信息，即 Skin 数据，没有 Skin 数据就是一个普通的静态 Mesh 了。 Skin 数据决定顶点如何绑定到骨骼上。顶点的 Skin 数据包括顶点受哪些骨骼影响以及这些骨骼影响该顶点时的权重 (weight) ，另外对于每块骨骼还需要骨骼偏移矩阵 (BoneOffsetMatrix) 用来将顶点从 Mesh 空间变换到骨骼空间。</p></li><li><p><strong>Prefab 的作用？如何在移动环境的设备下恰当地使用它？</strong></p><p>在游戏运行时实例化，prefab 相当于一个<strong>模版，对你已有的素材、脚本、参数做一个默认配置</strong>，以便于以后修改，同时 prefab 打包的内容简化了导出的操作，便于团队的交流。</p></li><li><p>如何销毁一个 UnityEngine.Object 及其子类</p><p>GameObject.Destory()；</p></li><li><p>为什么Unity3D 中会发生在组件上出现数据丢失的情况？</p><p>组件上绑定的对象被删除了</p></li><li><h5 id="MeshCollider-和其他-Collider-的一个主要不同点？"><a href="#MeshCollider-和其他-Collider-的一个主要不同点？" class="headerlink" title="MeshCollider 和其他 Collider 的一个主要不同点？"></a>MeshCollider 和其他 Collider 的一个主要不同点？</h5><p>Meshcollider 是基于顶点的。建议还是用 boxcollider，boxcollider 本身是基于算法，没有面的概念。</p></li><li><h5 id="当一个细小的高速物体撞向另一个较大的物体时，会出现什么情况？如何避免？"><a href="#当一个细小的高速物体撞向另一个较大的物体时，会出现什么情况？如何避免？" class="headerlink" title="当一个细小的高速物体撞向另一个较大的物体时，会出现什么情况？如何避免？"></a>当一个细小的高速物体撞向另一个较大的物体时，会出现什么情况？如何避免？</h5><p>穿透（碰撞检测失败）(碰撞体变大，FixedUpdate, 代码限制)</p></li><li><p>MeshRender 中 material 和 sharedmaterial 的区别？</p><p>修改 sharedMaterial 将改变所有物体使用这个材质的外观，并且也改变储存在工程里的材质设置。<br>不推荐修改由 sharedMaterial 返回的材质。如果你想修改渲染器的材质，使用 material替代。</p></li><li><p>用 u3d 实现 2d 游戏，有几种方式？</p><p>1.利用引擎自带的 GUI和2D系统<br>2.把摄像机设为 Orthographic，用面片作为 2d 元素<br>3.利用第三方插件：NGUI、2dToolkit</p></li><li><h5 id="u3d-中碰撞器和触发器的区别？"><a href="#u3d-中碰撞器和触发器的区别？" class="headerlink" title="u3d 中碰撞器和触发器的区别？"></a>u3d 中碰撞器和触发器的区别？</h5><p>触发器只是碰撞器身上的一个属性，碰撞器是触发器的载体。<br>collider 碰撞器会有碰撞的效果，IsTrigger &#x3D; false, 可以调用OnCollisionEnter&#x2F;Stay&#x2F;Exit 函数<br>trigger 触发器没有碰撞效果, isTrigger &#x3D; true,可以调用 OnTriggerEnter&#x2F;stay&#x2F;exit 函数<br>a.如果不想让<strong>碰撞检测影响物体移动</strong>但是又想检测到碰撞这时用到触发器（Trigger）<br>b.触发器用来检测一个物件是否经过空间中的某个区域</p></li><li><h5 id="CharacterController-和-Rigidbody-的区别"><a href="#CharacterController-和-Rigidbody-的区别" class="headerlink" title="CharacterController 和 Rigidbody 的区别"></a>CharacterController 和 Rigidbody 的区别</h5><p>Rigidbody 具有完全真实物理的特性， 而 CharacterController 可以说是受限的 Rigidbody，具有一定的物理效果但不是完全真实的。<br>Rigidbody<br>刚体组件，用于模拟真实的物理效果，它除了可以受到重力的效果外，还可以受到其他外力的效果，这个外力可以是直接施加，也可以是其他刚体对它的碰撞。刚体适合用来加给车这一类物体。</p><p>CharacterController<br>角色控制器组件，它自带一个胶囊碰撞器，它能受到重力这一个外力的影响。移动需要调用自带函数Move和SimpleMove两个函数。</p></li><li><p>什么叫做链条关节</p><p>Hinge Joint ，他可以模拟两个物体间用一根链条连接在一起的情况，能保持两个物体在一个固定距离内部相互移动而不产生作用力，但是达到固定距离后就会产生拉力。 （简单说就是弹簧）</p></li><li><h5 id="unity3d-提供了几种光源，分别是什么"><a href="#unity3d-提供了几种光源，分别是什么" class="headerlink" title="unity3d 提供了几种光源，分别是什么"></a>unity3d <strong>提供了几种光源</strong>，分别是什么</h5><p>平行光：Directional Light<br>聚光灯：Spot Light<br>点光源：Point Light<br>区域光源：Area Light（只用于烘培）</p></li><li><p>u3d 下如何安全的在不同工程迁移 asset 数据</p><p>方法 1，可以把 assets 目录和 Library 目录一起迁移，<br>方法 2，导出包<br>方法 3，用 unity 带的 assets server 功能</p></li><li><p>动画层(Animation Layers)的作用是什么？</p><p>动画层作为一个具有层级动画编辑概念的工具， 可以用来制作和处理任何类型的动画</p></li><li><h5 id="Material-和-Physic-Material-区别？"><a href="#Material-和-Physic-Material-区别？" class="headerlink" title="Material 和 Physic Material 区别？"></a>Material 和 Physic Material 区别？</h5><p>PhysicMaterial 物理材质：物理材质描述，如何处理物体碰撞（摩擦，弹性）。<br>Material 材质（材质类）为了获得一个对象使用的材质，可以使用 Renderer.materia 属性</p></li><li><p>什么是导航网格（NavMesh）？</p><p>一种用于实现自动寻路的网格</p></li><li><p>请简述 NGUI 中 Panel 和 Anchor 的作用<br>Anchor 包含 UIAnchor 脚本。 UIAnchor 的功能是把对象锚定在屏幕的边缘 （左上， 左中，左下，上，中，下，右上，右中，右下），或缩放物体使其匹配屏幕的尺寸<br>Panel 对象有 UIPanel 脚本，UIPanel 是一个容器，它将包含所有 UI 小部件，并负责将所包含的部件组合优化，以减少绘制命令的调用。</p></li><li><p><strong>Unity 摄像机有几种工作方式</strong>，分别是什么？</p><p>perspective透视摄像机<br>摄像机以透视角度渲染对象，距离相机越远，游戏对象显示越小，有透视感。</p><p>orthographic正交摄像机<br>摄像机均匀渲染对象，不管距离相机多远，游戏对象显示大小不变，没有透视感。</p></li><li><p>LayerMask.NameToLayer()这个方法有什么作用？</p><p>LayerMask 的使用是按位操作的，LayerMask.NameToLayer(“Players”) 返回该 Layer的编号。</p></li><li><p>NGUI与UGUI的优点和缺点</p><p>UGUI指的是Unity中的UI处理。</p><ol><li>NGUI是一款为Unity游戏引擎开发的工具功能扩展的UI插件，它能够为开发者提供了方便快捷的UI设计方法，加快设计游戏的速度。NGUI还保留着图集，需要进行图集的维护。而UGUI没有图集的概念，可以充分利用资源，避免重复资源。</li><li>UGUI出现了锚点的概念，更方便屏幕自适应。</li><li>NGUI支持图文混排，UGUI暂未发现支持此功能。</li><li>UGUI没有 UIWrap 来循环 scrollview 内容。</li><li>UGUI暂时没有集成Tween组件。</li></ol></li><li><p>UGUI和NGUI的区别？为什么不使用NGUI？</p><ol><li>UGUI的Canvas 有世界坐标和屏幕坐标，NGUI有2D和3D区别。</li><li>UGUI的Image可以使用material。</li><li>UGUI通过Mask来裁剪，而NGUI通过Panel的Clip</li><li>NGUI的渲染前后顺序是通过Widget的Depth，而UGUI渲染顺序根据Hierarchy的顺序，越下面渲染在顶层。</li><li>UGUI 不需要绑定Colliders，UI可以自动拦截事件。</li><li>UGUI的Anchor是相对父对象，没有提供高级选项，个人感觉uGUI的Anchor操作起来比NGUI更方便</li><li>UGUI没有Atlas一说，使用Sprite Packer。</li><li>UGUI的Navgation在Scene中能可视化。</li><li>UGUI的事件需要实现事件系统的接口，但写起来也算简单。</li><li>NGUI功能更丰富一些</li></ol><p>之所以不用NGUI是因为UGUI是Unity官方推出的，慢慢会成为制作UI的主要工具，配套的插件也越来越多，但是具体使用NGUI还是UGUI还要看公司这边，因为这两个我都用过一段时间。</p></li><li><p><strong>Unity3d中static batching和dynamic batching 各有什么用？</strong></p><p>Dynamic Batching<br>不需要任何操作，只要共享材质(即使是不同的Mesh模型也可以)，就会自动被合并。可以自由移动旋转。但有以下使用要求：<br>(1) 模型文件共计点数不超过900。（重复使用同一个Mesh不计）<br>(2) 单个物体可以不超过300点，Shader可以有法线UV。 但如果Shader使用了 UV0 UV1两套UV,或者Tangent切线的话，单个物体只能不超过180点<br>(3)游戏对象使用相同模型和材质时，只有相同缩放(即xyz等比缩放,浮点尾数可以有细微差)的会被合并。如<br>（1，1，1）与（1，1，1）<br>（2，2，2）与（2，2，2）<br>（0.5，0.5，0.5）与 （0.5，0.5，0.5）<br>（2,2,2）与（2,2，2.0001）<br>(4)场景烘焙：烘焙后同材质将不会被烘焙。lightmap 有隐藏的材质参数：offset&#x2F;scale, 所以使用lightmap的物体不会被合并<br>(5)Shader不能使用多Pass:多Pass的Shader会破坏Dynamic Batching</p><p>Static Batching<br>原理：运行游戏后将一组游戏对象的<strong>多个模型会被动态合并为1个</strong>。这组游戏对象所有使用同一材质的在一个DrawCall来完成。这些游戏对象运行后<strong>无法移动缩放旋转</strong>。但是Drawcall一定是最大化合并的，并且不受动态合并的诸多限制（见下文详述）。<br>注意：即使物体都使用了同样的模型，在batch后每一个物体都会创建一份模型对应的geometry,在新的Combined Mesh里。所以过多的batch会增加内存占用。例如场景里的树群就不适合Static Batch，而适合动态合并。<br>实现方法:<br>(1)MeshRenderer勾选Batching Static： 勾了即可<br>(2)代码中使用UnityEngine.StaticBatchingUtility实现(可以在任何平台调用):<br>1)将所有要合并的静态物体(不须勾Batching Static)放入统一一个root<br>2)StaticBatchingUtility.Combine(root); 之后就合并好了！<br>区别：勾选Batching Static：完全自动合并,在MeshFilter里显示的是 Combined Mesh(root:scene)。合并后不能移动<br>StaticBatchingUtility：合并到一个游戏对象下。合并后可以移动父节点游戏对象”</p></li><li><h4 id="Unity3d中Awake和Start-谁先执行，update和fixedUpdate-有什么区别？"><a href="#Unity3d中Awake和Start-谁先执行，update和fixedUpdate-有什么区别？" class="headerlink" title="Unity3d中Awake和Start 谁先执行，update和fixedUpdate 有什么区别？"></a>Unity3d中Awake和Start 谁先执行，update和fixedUpdate 有什么区别？</h4><p>Awake先执行。Update是在每次渲染新的一帧的时候才会调用，FixedUpdate，是在固定的时间间隔执行，不受游戏帧率（fps）的影响 ，FixedUpdate的时间间隔可以在项目设置中更改，Edit-&gt;Project Setting-&gt;time 找到Fixed timestep。就可以修改了.</p></li><li><h4 id="简述Prefab的使用？Editor下动态创建Prefab的方式"><a href="#简述Prefab的使用？Editor下动态创建Prefab的方式" class="headerlink" title="简述Prefab的使用？Editor下动态创建Prefab的方式"></a>简述Prefab的使用？Editor下动态创建Prefab的方式</h4><p>Editor下动态创建Prefab的方式 “u3d里动态创建对象，需要使用prefab而创建的时候 MonoBehaviour.Instantiate(GameObject orignal) 需要一个作为原型的对象。</p><p>三种方式获得prefab对象：</p><p>方式一：使用脚本的public字段<br>直接在Project视图里找到做好的prefab，将其拖拽到指定脚本的指定public GameObject 字段。</p><p>方式二：Resource类<br>1、在Assets目录下的任意位置创建一个名为resources的文件夹，将做好的prefab放到这个文件夹下，path形式如下: Assets…\resources\prefabName.prefab<br>2、在代码里使用Resource.Load 或 LoadAll 函数，获得原型对象。指定prefab时不需要指定扩展名（.prefab），形式如下：GameObject prototype &#x3D; Resource.Load(“prefabName”) as GameObject; 可以有任意数量的resources文件夹，怀疑是Resource类初始化的时候会搜集所有resources文件夹里的文件名。</p><p>方式三：加载到场景<br>一般我们制作Perfab的时候，都是在Hierarchy视图里创建GameObject，然后再搭建Prefab。事后根据需要删除这个原始的GameObject。因此我们可以保留这个GameObject，然后在场景加载后Find这个对象（代码方式），或者使用脚本public字段（编辑器方式）</p></li><li><p>NGUI的自适应性是？如果此时屏幕比例变化，屏幕出现黑边怎么办？（注：改变NGUI和UGUI的Fixed size with Screen不可行）</p><p>NGUI根目录的UIRoot组件自带了根据高度自适应分辨率的功能。<br>Scaling Style属性可选择三种不同的缩放策略。<br>PixelPerfect 完美像素：直接显示设定好的像素。当屏幕高度低于minimum Height时按比例缩小，当屏幕高度大于maximum Height时按比例扩大。<br>FixedSize 按比例缩放：在设定好的基础上，直接按比例缩放。<br>FixedSizeOnMobiles 合体版，android和ios为FixedSize方式，其它按照PixelPerfect方式。</p></li></ol><h2 id="Unity脚本基础"><a href="#Unity脚本基础" class="headerlink" title="Unity脚本基础"></a>Unity脚本基础</h2><ol><li><h4 id="Unity3D中的协程（coroutine）和C-线程之间的区别是什么？"><a href="#Unity3D中的协程（coroutine）和C-线程之间的区别是什么？" class="headerlink" title="Unity3D中的协程（coroutine）和C#线程之间的区别是什么？"></a>Unity3D中的协程（coroutine）和C#线程之间的区别是什么？</h4><p>多线程程序同时运行多个线程 ，而在<strong>任一指定时刻只有一个协程在运行</strong>，并且这个正在运行的协同程序只在必要时才被挂起。除主线程之外的线程无法访问 Unity3D 的对象、组件、方法。<br>Unity3d 没有多线程的概念，不过 unity 也给我们提供了 StartCoroutine（协同程序）和LoadLevelAsync（异步加载关卡）后台加载场景的方法。<br>StartCoroutine 为什么叫协同程序呢，所谓协同，就是当你在 StartCoroutine 的函数体里处理一段代码时，利用 yield 语句等待执行结果，这期间不影响主程序的继续执行，可以协同工作。而 LoadLevelAsync 则允许你在后台加载新资源和场景，所以再利用协同，你就可以前台用 loading 条或动画提示玩家游戏未卡死，同时后台协同处理加载的事宜。</p></li><li><p>简述 Unity3D 支持的作为脚本的语言的名称</p><p>Unity 的脚本语言基于 Mono 的.Net 平台上运行，可以使用.NET 库，这也为 XML、数据库、正则表达式等问题提供了很好的解决方案。<br>Unity 里的脚本都会经过编译，他们的运行速度也很快。这三种语言实际上的功能和运行速度是一样的，区别主要体现在语言特性上。</p><p>JavaScript：和网页中常用的 JavaScript 不一样，它编译后的运行速度很快，语法方面也会有不少区别。<br>C#<br>Boo：可以看做是 Python 语言的变种，又糅合了 Ruby 和 C#的特性，它是静态类型语言。</p></li><li><h5 id="Unity3D-是否支持写成多线程程序？如果支持的话需要注意什么？"><a href="#Unity3D-是否支持写成多线程程序？如果支持的话需要注意什么？" class="headerlink" title="Unity3D 是否支持写成多线程程序？如果支持的话需要注意什么？"></a>Unity3D 是否支持写成多线程程序？如果支持的话需要注意什么？</h5><p>仅能从主线程中访问 Unity3D 的组件，对象和 Unity3D 系统调用<br>支持：如果同时你要处理很多事情或者与 Unity 的对象互动小可以用 thread,否则使用coroutine。<br>注意：C#中有 lock 这个关键字,以确保只有一个线程可以在特定时间内访问特定的对象</p></li><li><p>OnEnable、Awake、Start 运行时的发生顺序？哪些可能在同一个对象周期中反复的发生？</p><p>Awake —&gt;OnEnable—&gt;Start<br>OnEnable 在同一周期中可以反复地发生</p></li><li><p>请简述 OnBecameVisible 及 OnBecameInvisible 的发生时机，以及这一对回调函数的意义？</p><p>当物体是否可见切换之时。可以用于只需要在物体可见时才进行的计算。</p></li><li><p>Unity3D 如何获知场景中需要加载的数据？</p><p>Resource.Load<br>AssetBundle.Load</p></li><li><p><strong>物体发生碰撞时，有几个阶段，分别对应的函数</strong></p><p>三个阶段，OnCollisionEnter&#x2F;Stay&#x2F;Exit 函数</p></li><li><p>u3d 中，几种施加力的方式，描述出来</p><p>rigidbody.AddForce&#x2F;AddForceAtPosition，都是 rigidbody 的成员函数</p></li><li><p>物体自旋转使用的函数叫什么？物体绕某点旋转使用函数叫什么？</p><p>transform.Rotate<br>transform.RotateAround</p></li><li><p>u3d 提供了一个用于保存读取数据的类，（playerPrefs），请列出保存读取整形数据的函数</p><p>PlayerPrefs.SetInt 与 PlayerPrefs.GetInt</p></li><li><h5 id="unity3d-从唤醒到销毁有一段生命周期，请列出系统自己调用的几个重要方法。"><a href="#unity3d-从唤醒到销毁有一段生命周期，请列出系统自己调用的几个重要方法。" class="headerlink" title="unity3d 从唤醒到销毁有一段生命周期，请列出系统自己调用的几个重要方法。"></a>unity3d 从唤醒到销毁有一段生命周期，请列出系统自己调用的几个重要方法。</h5><p>Awake –&gt;OnEnable –&gt; Start –&gt; FixedUpdate–&gt; Update  –&gt; LateUpdate –&gt;OnGUI –&gt; Reset –&gt; OnDisable –&gt; OnDestroy</p></li><li><h5 id="物理更新一般在哪个系统函数里？"><a href="#物理更新一般在哪个系统函数里？" class="headerlink" title="物理更新一般在哪个系统函数里？"></a>物理更新一般在哪个系统函数里？</h5><p>FixedUpdate，每固定帧绘制时执行一次，和 update 不同的是 FixedUpdate 是渲染帧执行，如果你的渲染效率低下的时候FixedUpdate 调用次数就会跟着下降。FixedUpdate 比较适用于物理引擎的计算，因为是跟每帧渲染有关。Update 就比较适合做控制。</p></li><li><h5 id="移动相机动作在哪个函数里，为什么在这个函数里。"><a href="#移动相机动作在哪个函数里，为什么在这个函数里。" class="headerlink" title="移动相机动作在哪个函数里，为什么在这个函数里。"></a>移动相机动作在哪个函数里，为什么在这个函数里。</h5><p>LateUpdate,，是在所有 update 结束后才调，比较适合用于命令脚本的执行。官网上例子是摄像机的跟随，都是在所有 update 操作完才跟进摄像机，不然就有可能出现摄像机已经推进了，但是视角里还未有角色的空帧出现。</p></li><li><h5 id="什么是协同程序？"><a href="#什么是协同程序？" class="headerlink" title="什么是协同程序？"></a>什么是协同程序？</h5><p>在主线程运行时同时开启另一段逻辑处理，来协助当前程序的执行。换句话说，开启协程就是开启一个线程。可以用来控制运动、序列以及对象的行为。</p></li><li><p>反向旋转动画的方法是什么？</p><p>反转动画，将动画的速度调到-1，碰撞时，被碰撞物体与碰撞物体有collider 组件，碰撞物体有刚体组件，或角色碰撞得包含角色组件 OR 改变 animation.speed</p></li><li><p>实现吊机吊物体的功能</p><p>吊机吊物体需要节点挂接和坐标系转换</p></li><li><p>获取、增加、删除组件的命令分别是什么</p><p>获取：GetComponent<br>增加：AddComponent<br>删除：Destroy</p></li><li><p>调试记录到控制台的命令是什么？</p><p>Debug.Log();</p></li><li><p>编辑器类存放路径是什么？</p><p>工程目录下的 Assets&#x2F;Editor 文件夹下。</p></li><li><p>使用原生 GUI 创建一个可以拖动的窗口命令是什么？</p><p>GUI.DragWindow();</p></li><li><h5 id="localPosition-与-Position-的使用区别？"><a href="#localPosition-与-Position-的使用区别？" class="headerlink" title="localPosition 与 Position 的使用区别？"></a>localPosition 与 Position 的使用区别？</h5><p>localPosition：自身位置，相对于父级的变换的位置。<br>Position：在世界坐标 transform的位置</p></li><li><p>Mathf.Round, Mathf.Clamp, Mathf.Lerp的含义</p><p>Mathf.Round 四舍五入<br>Mathf.Clamp 限制<br>Mathf.Lerp 插值</p></li><li><h5 id="写出-Animation-的五个方法"><a href="#写出-Animation-的五个方法" class="headerlink" title="写出 Animation 的五个方法"></a>写出 Animation 的五个方法</h5><p>AddClip 添加剪辑、Blend 混合、Play 播放、Stop 停止、Sample 采样</p></li><li><p>&lt;愤怒的小鸟&gt;给予初速度以后,怎么让小鸟受到重力和空气阻力的影响而绘制抛物线轨迹,说出具体的计算方法.</p><p>Vector3 v 代表初速度 v’代表现在的速度， 假设小鸟是沿的 z 轴也就是 transform.forward方向运动的质量为 1<br>那么 v’&#x3D;v-new Vector3(0,gt,ft)，transform.Translate(v’)做的就是抛物线运动（g 为重力加速度不要用现实中的需要自己调试，f 为阻力也要自己调试设置，t 为时间）</p></li><li><h5 id="当游戏中需要频繁创建一个物体时，我们需要怎样做能够节省内存？"><a href="#当游戏中需要频繁创建一个物体时，我们需要怎样做能够节省内存？" class="headerlink" title="当游戏中需要频繁创建一个物体时，我们需要怎样做能够节省内存？"></a>当游戏中需要频繁创建一个物体时，我们需要怎样做能够节省内存？</h5><p>1、使用预制物体对象 Prefab<br>2、使用对象池技术，不使用时关闭，使用时打开</p></li><li><h5 id="碰撞检测需要物体具备什么属性？"><a href="#碰撞检测需要物体具备什么属性？" class="headerlink" title="碰撞检测需要物体具备什么属性？"></a>碰撞检测需要物体具备什么属性？</h5><p>能检测碰撞发生的方式有两种，一种是利用碰撞器，另一种则是利用触发器<br>【Physics.OverlapSphere 相交球检测碰撞，碰撞检测需要包围盒】</p></li><li><p>Vector3.forward与Vector3(0,0,1)是一样的意思对吗？<br>对</p><p>拓展：<br>1.Transform.forward<br>Transform.forward指当前物体的坐标系（局部坐标系）的Z轴指向世界坐标系的Z轴(官方文档中的蓝色轴就代表Z轴)。如果当前物体旋转，<strong>当前物体坐标系（局部坐标系）会随着物体物体一起旋转</strong>。<br>2.Vector3.forward<br>Vector3.forward指（0，0，1），而且此处的（0，0，1）是指世界坐标系中的三维向量，当物体旋转时Vector3.forward<strong>不会随着物体局部坐标系的改变而改变</strong>，仍然指向世界坐标系的（0，0，1）。</p></li><li><p>下哪个函数在游戏进入新场景后会被马上调用？<br>MonoBehaviour.OnLevelWasLoaded</p></li><li><p>NGUI:把子控件放在父控件里面，如何让上下边距都是10？</p><p>给子控件设置上下两个锚点为10</p></li><li><p>如何使子控件居中,如果使用UGUI怎么实现</p><p>设置子控件锚点为中心</p></li><li><p>unity3D从唤醒到销毁有一段生命周期，列出系统自己调用的重要方法。</p><p>Awake ()<br>OnEnable ()<br>Start()<br>FixedUpdate()<br>OnTriggerXXX(Collider other)<br>OnCollisionXXX (Collision collisionInfo)<br>Update()<br>LateUpdate ()<br>OnGUI()<br>OnDisable ()<br>OnDestroy ()</p></li><li><h5 id="Unity3d中resources目录一般用来放些什么，打包的时候会有什么影响？"><a href="#Unity3d中resources目录一般用来放些什么，打包的时候会有什么影响？" class="headerlink" title="Unity3d中resources目录一般用来放些什么，打包的时候会有什么影响？"></a>Unity3d中resources目录一般用来放些什么，打包的时候会有什么影响？</h5><p>resource一般用来放置一些<strong>需要动态加载的资源</strong>，打包程序的时候会将Resource目录下的全部文件都加密压缩打进包内，这样再想使用assetbundle方式打小包的话就不行了。</p></li><li><h5 id="Unity中销毁GameObject的方式，简述Destroy和DestroyImmediate的区别"><a href="#Unity中销毁GameObject的方式，简述Destroy和DestroyImmediate的区别" class="headerlink" title="Unity中销毁GameObject的方式，简述Destroy和DestroyImmediate的区别"></a>Unity中销毁GameObject的方式，简述Destroy和DestroyImmediate的区别</h5><p>Destroy销毁场景中的物体，但是内存中它还是存在的，只有当内存不够时，机制才会将它销毁并释放内存。而DestroyImmediate会立即将对象销毁，并且将内存释放。</p></li><li><p><strong>.Unity中如何派发事件（消息）</strong></p><p>在脚本里的Update函数里调用EventDispatcher.Instance().OnTick();就可以了</p></li><li><p><strong>ScriptObject的作用和使用方式</strong></p><p>ScriptObject类型经常使用于存储一些Unity本身不可以打包的一些object，比如字符串，一些类对象，用这个类型的子类型可以用BuildPipeline打包成assetbundle包共后续使用，非常方便。</p></li><li><p>如何检测物体是否被其他对象遮挡</p><p>使用射线进行检测</p></li><li><p>什么是状态机，什么是行为树</p><p>有限状态机系统：是指在不同阶段会呈现出不同的运行状态的系统，这些状态是有限的、不重叠的。这样的系统在某一时刻一定会处于其所有状态中的一个状态，此时它接收一部分允许的输入，产生一部分可能的响应，并且迁移到一部分可能的状态。</p><ol><li>基本节点是状态：他包含了一系列运行在该状态的行为以及离开这个状态的条件。</li><li>状态可以任意跳转,实现简单,但是对于大的状态机很难维护.状态逻辑的重用性低.</li><li>每一个状态的逻辑会随着一些新状态的增加而越来越复杂。维持状态的数量和状态逻辑复杂性是一个很大的难点。需要合理的分割以及重用状态。</li><li>状态机状态的复用性很差，一旦一些因素变化导致这个环境发生变化。你只能新增一个状态，并且给这个新状态添加连接他以及其他状态的跳转逻辑。</li><li>状态机的跳转条件一旦不满足，就会一直卡在某一个状态。<br>行为树：一个流行的AI技术，涵盖了层次状态机，事件调度，事件计划，行为等一系列技术。</li><li>高度模块化状态，去掉状态中的跳转逻辑，使得状态变成一个“行为”。</li><li>“行为”和”行为”之间的跳转是通过父节点的类型来决定的。比如并行处理两个行为，在状态机里面无法同时处理两个状态。</li><li>通过增加控制节点的类型，可以达到复用行为的目的。</li><li>可视化编辑</li></ol></li><li><h5 id="pairs的区别ipairs"><a href="#pairs的区别ipairs" class="headerlink" title="pairs的区别ipairs"></a>pairs的区别ipairs</h5><p>pairs遍历，会把所有值都遍历出来<br>ipairs遍历，<strong>遇到nil会停止</strong>，也不会把key-value存储的值遍历出来</p></li><li><h5 id="time-deltatime的作用"><a href="#time-deltatime的作用" class="headerlink" title="time.deltatime的作用"></a>time.deltatime的作用</h5><p>变量deltaTime表示为unity本地变量（一般为固定值0.02s），作为Time类中的数据在各帧中被更新，<strong>在各帧中，该变量显示了距上一帧所经历的时间值</strong>（以秒计算）。</p><p>这个变量的优点： 使用这个函数他会与你的游戏帧速率无关 放在Update（）函数中的代码是以帧来执行的，我们需要将移动的物体乘以秒来执行，而用速度乘以deltaTime其就可以实现</p></li><li><p>射线</p><p>ScreenPointToRay()方法：屏幕像素点转换成射线，通常值都是Input.mousePosition，实际上Input.mousePosition获取的也是屏幕点，也就是屏幕位置，而非世界坐标。</p></li><li><p>怎样修改UI的层级</p><p>修改canvas对应的sort order的值，值越大的UI会覆盖值小的UI。</p></li><li></li></ol><h2 id="Unity性能优化"><a href="#Unity性能优化" class="headerlink" title="Unity性能优化"></a>Unity性能优化</h2><ol><li><p>lod是什么，优缺点是什么</p><p>LOD 技术即 Levels of Detail 的简称，意为多细节层次。LOD 技术指<strong>根据物体模型的节点在显示环境中所处的位置和重要度，决定物体渲染的资源分配</strong>，降低非重要物体的面数和细节度，从而获得高效率的渲染运算。<br>优点：可根据距离动态地选择渲染不同细节的模型<br>缺点：加重美工的负担，要准备不同细节的同一模型，同样的会稍微增加游戏的容量。</p></li><li><p>MipMap 是什么？作用？</p><p>Mipmaps <strong>多级渐远纹理技术</strong>.它会提前用滤波处理来得到更多的图片,形成一个图像金字塔,每一层是对上一层的降采样结果(四分之一).实际使用的贴图会<strong>根据摄像机距离的远近，选择使用不同精度的贴图。</strong></p><p>在三维计算机图形的贴图渲染中有一个常用的技术被称为 Mipmapping。<strong>为了加快渲染速度和减少图像锯齿</strong>，贴图被处理成由一系列<strong>被预先计算和优化过的图片组成的文件</strong>,这样的贴图被称为 MIP map 或者 mipmap。</p></li><li><p>当游戏中需要频繁创建一个物体对象时，我们需要怎么做来节省内存。</p><p>对象池，做一个 pool，游戏开始时预先实例化足够的数量，然后用的时候取不用的时候收回</p></li><li><p>如何优化内存？</p><p>有很多种方式，例如<br>1.压缩自带类库；<br>2.将暂时不用的以后还需要使用的物体隐藏起来而不是直接 Destroy 掉；<br>3.释放 AssetBundle 占用的资源；<br>4.降低模型的片面数，降低模型的骨骼数量，降低贴图的大小；<br>5.使用光照贴图，使用多层次细节(LOD)，使用着色器(Shader)，使用预设(Prefab)。</p></li><li><p>动态加载资源的方式？和区别</p><p>1.通过 Resources 模块，调用它的 load 函数：可以直接 load 并返回某个类型的 Object，前提是要把这个资源放在 Resource 命名的文件夹下，Unity不关有没有场景引用，都会将其全部打入到安装包中。Resources.Load();<br>2.通过 bundle 的形式： 即将资源打成 asset bundle 放在服务器或本地磁盘， 然后使用 WWW 模块 get 下来， 然后从这个 bundle 中 load 某个 object。<br>AssetBundle<br>3.通过 AssetDatabase.loadasset ：这种方式只在 editor 范围内有效，游戏运行时没有这个函数， 它通常是在开发中调试用的 【AssetDatabase 资源数据库】<br>区别：Resources 的方式需要把所有资源全部打入安装包，这对游戏的分包发布（微端）和版本升级（patch）是不利的，所以 unity 推荐的方式是不用它， 都用 bundle 的方式替代， 把资源达成几个小的 bundle， 用哪个就 load哪个，这样还能分包发布和 patch，但是在开发过程中，不可能没更新一个资源就打一次 bundle， 所以 editor 环境下可以使用 AssetDatabase 来模拟，这通常需要我们封装一个 dynamic resource 的 loader 模块，在不同的环境下做不同实现。<br>动态资源的存放<br>有时我需要存放一些自己的文件在磁盘上，例如我想把几个 bundle 放在初始的安装里， unity 有一个 streaming asset 的概念，用于提供存储接口的访问。我们需要在编辑器建立一个 StreamingAssets 名字的文件夹，把需要我们放在客户磁盘上的动态文件放在这个文件夹下面，这样安装后，这些文件会放在用户磁盘的指定位置，这个位置可以通过Application.streamingAssetsPath 来得到。</p></li><li><h4 id="请简述一下对象池原理-什么情况下使用？"><a href="#请简述一下对象池原理-什么情况下使用？" class="headerlink" title="请简述一下对象池原理,什么情况下使用？"></a>请简述一下对象池原理,什么情况下使用？</h4><p>对象池背后的理念其实是非常简单的。我们将对象存储在一个池子中，当需要时在再次使用，而不是每次都实例化一个新的对象。池的最重要的特性，也就是对象池设计模式的本质是允许我们获取一个“新的”对象而不管它真的是一个新的对象还是循环使用的对象。<br>对象池通常用于在那些需要经常创建又销毁的对象比如我们场景中的小怪，经常需要创建和销毁，我们就可以在小怪销毁的时候，不真正的销毁而是，而是把它放入对象池中等到下一次我们需要创建小怪的时候，再从对象池中取出来。</p></li><li><p>使用mipmap有什么好处？什么情况下使用？</p><p>Mipmap纹理技术是目前解决纹理分辨率与视点距离关系的最有效途径,它会先将图片压缩成很多逐渐缩小的图片,例如一张6464的图片,会产生 6464,3232,1616,88,44,22,11的7张图片,当屏幕上需要绘制像素点为2020 时，程序只是利用 3232 和 1616 这两张图片来计算出即将显示为 2020 大小的一个图片，这比单独利用 32*32 的那张原始片计算出来的图片效果要好得多，速度也更快。</p></li><li><p>Unity内存优化？<br>GC垃圾回收</p></li><li><p>你认为unity在开发过程中哪些地方比较容易造成内存泄漏和内存泄漏问题？如何避免？</p><p>脚本做载入不删除处理时，往往脚本中还有一些不用的变量，容易导致内容泄漏</p></li><li><p>使用NGUI开发滚动视图，当滚动列表达到几百条的时候，如何才能保证界面的滚动流畅运行</p><p>每个滚动条目都是同一个预设体的实例；<br>做缓存，只要实例化视野范围内滚动条目，往上超出视野部分，自动填补到视野的下面。</p></li><li><h4 id="如何解决过多创建和删除对象带来的卡顿问题"><a href="#如何解决过多创建和删除对象带来的卡顿问题" class="headerlink" title="如何解决过多创建和删除对象带来的卡顿问题"></a>如何解决过多创建和删除对象带来的卡顿问题</h4><p>对象池，把不用对象缓存到一个对象列表中</p></li><li><p>背包系统中只有20个格子，现在有总共有100个物体，除了显示在视野中的20个外，对其他的处理方法？（注：将其他隐藏起来不可行，对象池得有具体的说明）</p><ol><li>每个滚动条目都是同一个预设体的实例</li><li>做缓存，只要实例化视野范围内滚动条目，往上超出视野部分，自动填补到视野的下面</li></ol></li><li></li></ol><h2 id="数据结构算法相关"><a href="#数据结构算法相关" class="headerlink" title="数据结构算法相关"></a>数据结构算法相关</h2><ol><li><p>对List的理解</p><p><strong>有序</strong>的对象列表，属于数据结构的一种：<strong>顺序结构</strong><br>泛型集合类，引入System.Collections.Generic命名空间，<br>常用操作有，Count属性查看长度，Add()添加，Remove()去除，AddRange()添加集合，Clear()清空集合。</p></li><li><p>数组和List的核心区别</p><p>数组在C#中最早出现的。在内存中是连续存储的，所以它的索引速度非常快，而且赋值与修改元素也很简单。</p><p>数组存在一些不足的地方。在数组的两个数据间插入数据是很麻烦的，而且在声明数组的时候必须指定数组的长度，数组的长度过长，会造成内存浪费，过段会造成数据溢出的错误。如果在声明数组时我们不清楚数组的长度，就会变得很麻烦。<br>List是集合，集合元素的数量<strong>可以动态变化</strong>。增加、插入、删除元素很方便。</p></li></ol><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>单例模式实现</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Singleton&#123;    private volatile static Singleton _instance &#x3D; null;    private static readonly object Obj &#x3D; new object();    private Singleton() &#123; &#125;    public static Singleton CreateInstance()    &#123;        if (_instance &#x3D;&#x3D; null)        &#123;            lock (Obj)            &#123;                if (_instance &#x3D;&#x3D; null)                    _instance &#x3D; new Singleton();            &#125;        &#125;        return _instance;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>volatile 关键字指示一个字段可以由多个同时执行的线程修改。 出于性能原因，编译器，运行时系统甚至硬件都可能重新排列对存储器位置的读取和写入。 声明了 volatile 的字段不进行这些优化。</p><h2 id="图形学"><a href="#图形学" class="headerlink" title="图形学"></a>图形学</h2><ol><li><h5 id="简述四元数的作用，四元数对欧拉角的优点？"><a href="#简述四元数的作用，四元数对欧拉角的优点？" class="headerlink" title="简述四元数的作用，四元数对欧拉角的优点？"></a>简述四元数的作用，四元数对欧拉角的优点？</h5><p>四元数用于表示旋转<br>A.四元数一般定义如下：q&#x3D;w+xi+yj+zk 其中 w,x,y,z 是实数。同时，<br>有: i<em>i&#x3D;-1 j</em>j&#x3D;-1 k*k&#x3D;-1<br>B.四元数也可以表示为： q&#x3D;[w,v]</p><p>有多种方式可表示旋转，如 axis&#x2F;angle、欧拉角(Euler angles)、矩阵<br>(matrix)、四元组等。 相对于其它方法，四元组有其本身的优点：<br>a.四元数不会有欧拉角存在的 gimbal lock 问题[万向节死锁]<br>b.四元数由 4 个数组成，旋转矩阵需要 9 个数<br>c.两个四元数之间更容易插值<br>d.四元数、矩阵在多次运算后会积攒误差，需要分别对其做规范化(normalize)和正交化 (orthogonalize)，对四元数规范化更容易<br>e.与旋转矩阵类似，两个四元组相乘可表示两次旋转</p></li><li><h5 id="向量的点乘、叉乘以及归一化的意义？"><a href="#向量的点乘、叉乘以及归一化的意义？" class="headerlink" title="向量的点乘、叉乘以及归一化的意义？"></a>向量的点乘、叉乘以及归一化的意义？</h5><p>1）点乘描述了两个向量的相似程度，结果越大两向量越相似，还可表示投影</p><p>2）叉乘得到的向量垂直于原来的两个向量</p><p>3）标准化向量：用在只关心方向，不关心大小的时候</p></li><li><h5 id="矩阵相乘的意义及注意点"><a href="#矩阵相乘的意义及注意点" class="headerlink" title="矩阵相乘的意义及注意点"></a>矩阵相乘的意义及注意点</h5><p>用于表示线性变换：旋转、缩放、投影、平移、仿射</p><p>注意矩阵的蠕变：误差的积累</p></li><li><h5 id="alpha-blend-工作原理"><a href="#alpha-blend-工作原理" class="headerlink" title="alpha blend 工作原理"></a>alpha blend 工作原理</h5><p>实际显示颜色 &#x3D; 前景颜色Alpha&#x2F;255 + 背景颜色(255-Alpha)&#x2F;255</p></li><li><p>写光照计算中的 diffuse 的计算公式</p><p>实际光照强度 I&#x3D; 环境光(Iambient) + 漫反射光(Idiffuse) + 镜面高光(Ispecular);</p><p>环境光：Iambient&#x3D; Aintensity* Acolor;<br>(Aintensity 表示环境光强度，Acolor 表示环境光颜色)</p><p>漫反射光：Idiffuse &#x3D; Dintensity<em>Dcolor</em>N.L;<br>(Dintensity 表示漫反射强度，Dcolor 表示漫反射光颜色，N 为该点的法向量，L 为光源向量)</p><p>镜面反射光：Ispecular &#x3D; Sintensity<em>Scolor</em>(R.V)^n;<br>(Sintensity 表示镜面光照强度，Scolor 表示镜面光颜色，R 为光的反射向量，V 为观察者向量，n 称为镜面光指数)</p></li><li><p>两种阴影判断的方法工作原理</p><p>阴影由两部分组成：本影与半影<br>本影：景物表面上那些没有被光源直接照射的区域（全黑的轮廓分明的区域）<br>半影：景物表面上那些被某些特定光源直接照射但并非被所有特定光源直接照射的区域（半明半暗区域）</p><p>求阴影区域的方法：做两次消隐过程<br>一次对每个光源进行消隐，求出对于光源而言不可见的区域 L；<br>一次对视点的位置进行消隐，求出对于视点而言可见的面 S；<br>shadow area&#x3D; L ∩ S</p><p>阴影分为两种：自身阴影和投射阴影</p><p>自身阴影：因物体自身的遮挡而使光线照射不到它上面的某些可见面<br>工作原理：利用背面剔除的方法求出，即假设视点在点光源的位置。</p><p>投射阴影： 因不透明物体遮挡光线使得场景中位于该物体后面的物体或区域受不到光照照射而形成的阴影<br>工作原理：从光源处向物体的所有可见面投射光线，将这些面投影到场景中得到投影面，再</p><p>将这些投影面与场景中的其他平面求交得出阴影多边形，保存这些阴影多边形信息，然后再按视点位置对场景进行相应处理得到所要求的视图（利用空间换时间，每次只需依据视点位置进行一次阴影计算即可，省去了一次消隐过程）若是动态光源此方法就无效了。</p></li><li><p>Vertex Shader 是什么？怎么计算？</p><p>顶点着色器是一段执行在 GPU 上的程序，用来取代 fixed pipeline 中的 transformation和 lighting，Vertex Shader 主要操作顶点。</p><p>Vertex Shader 对输入顶点完成了从 local space 到 homogeneous space（齐次空间）的变换过程，homogeneous space 即 projection space 的下一个 space。在这其间共有 worldtransformation, view transformation 和 projection transformation 及 lighting 几个过程。</p></li><li><h5 id="什么是渲染管道？"><a href="#什么是渲染管道？" class="headerlink" title="什么是渲染管道？"></a>什么是渲染管道？</h5><p>是指在显示器上为了显示出图像而经过的一系列必要操作。 渲染管道中的很多步骤，都要</p><p>将几何物体从一个坐标系中变换到另一个坐标系中去。主要步骤有：</p><p>本地坐标-&gt;视图坐标-&gt;背面裁剪-&gt;光照-&gt;裁剪-&gt;投影-&gt;视图变换-&gt;光栅化。</p></li><li><h5 id="怎么判断两个平面是否相交-不能用碰撞体-说出计算方法"><a href="#怎么判断两个平面是否相交-不能用碰撞体-说出计算方法" class="headerlink" title="怎么判断两个平面是否相交?不能用碰撞体,说出计算方法"></a>怎么判断两个平面是否相交?不能用碰撞体,说出计算方法</h5><p>对于两个平面Ax+By+Cz+D&#x3D;0与ax+by+cz+d&#x3D;0，只要(A,B,C)与(a,b,c)不成比例，这两个平面就是相交的。</p></li><li><h5 id="法线贴图-、CG-动画"><a href="#法线贴图-、CG-动画" class="headerlink" title="法线贴图 、CG 动画"></a>法线贴图 、CG 动画</h5><p>A.法线贴图：是在原物体的凹凸表面的每个点上均作法线，通过 RGB 颜色通道来标记法线的方向， 你可以把它理解成与原凹凸表面平行的另一个不同的表面，但实际上它又只是一个光滑的平面。</p><p>B.CG 动画：原为 Computer Graphics 的英文缩写。随着以计算机为主要工具进行视觉设计和生产的一系列相关产业的形成,国际上习惯将利用计算机技术进行视觉设计和生产的领域通称为 CG。它既包括技术也包括艺术，几乎囊括了当今电脑时代中所有的视觉艺术创作活动，如平面印刷品的设计、网页设计、三维动画、影视特效、多媒体技术、以计算机辅助设计为主的建筑设计及工业造型设计等。</p></li><li><h5 id="什么是局部坐标，什么是世界坐标？"><a href="#什么是局部坐标，什么是世界坐标？" class="headerlink" title="什么是局部坐标，什么是世界坐标？"></a>什么是局部坐标，什么是世界坐标？</h5><p>世界坐标是不会变的， 一直以世界坐标轴的 XYZ 为标准。 局部坐标其实就是自身的坐标，会随着物体的旋转而变化的。</p></li><li><h5 id="请描述-MeshRender-中-material-和-shader-的区别？"><a href="#请描述-MeshRender-中-material-和-shader-的区别？" class="headerlink" title="请描述 MeshRender 中 material 和 shader 的区别？"></a>请描述 MeshRender 中 material 和 shader 的区别？</h5><p>Shader（着色器）实际上就是一小段程序，它负责将输入的 Mesh（网格）以指定的方式和输入的贴图或者颜色等组合作用，然后输出。绘图单元可以依据这个输出来将图像绘制到屏幕上。输入的贴图或者颜色等，加上对应的 Shader，以及对 Shader 的特定的参数设置，将这些内容（Shader 及输入参数）打包存储在一起，得到的就是一个 Material（材质）Shader 大体上可以分为两类:表面着色器（Surface Shader） 、片段着色器（Fragment Shader）</p></li><li><h5 id="什么是矢量图"><a href="#什么是矢量图" class="headerlink" title="什么是矢量图"></a>什么是矢量图</h5><p>矢量图：计算机中显示的图形一般可以分为两大类——矢量图和位图。矢量图使用直线和曲线来描述图形，这些图形的元素是一些点、线、矩形、多边形、圆和弧线等等，它们都是通过数学公式计算获得的。例如一幅花的矢量图形实际上是由线段形成外框轮廓， 由外框的颜色以及外框所封闭的颜色决定花显示出的颜色。由于矢量图形可通过公式计算获得，所以矢量图形文件体积一般较小。矢量图形最大的优点是无论放大、缩小或旋转等不会失真；最大的缺点是难以表现色彩层次丰富的逼真图像效果。</p></li><li><h5 id="四元组是什么"><a href="#四元组是什么" class="headerlink" title="四元组是什么?"></a>四元组是什么?</h5><p>所谓四元数，就是把 4 个实数组合起来的东西。4 个元素中，一个是实部，其余 3 个是虚部。</p></li><li><h5 id="什么是投影矩阵"><a href="#什么是投影矩阵" class="headerlink" title="什么是投影矩阵"></a>什么是投影矩阵</h5><p>投影矩阵是一个典型的缩放和透视矩阵。投影变换将视锥变换成一个直平行六面体的形状。因为视锥的近处比远处小，这样就会对靠近摄像机的对象起到放大的作用，也就将透视应用到了场景当中。</p></li><li><h5 id="什么是UV"><a href="#什么是UV" class="headerlink" title="什么是UV"></a>什么是UV</h5><p>UV坐标是指所有的图象文件都是二维的一个平面。水平方向是U，垂直方向是V，通过这个平面的，二维的UV坐标系。我们可以定位图象上的任意一个象素。</p></li><li><h5 id="Cullback，cullfront，culloff区别"><a href="#Cullback，cullfront，culloff区别" class="headerlink" title="Cullback，cullfront，culloff区别"></a>Cullback，cullfront，culloff区别</h5><p>剔除背面、剔除前面、不剔除</p></li><li><h5 id="什么是顶点程序和片段程序"><a href="#什么是顶点程序和片段程序" class="headerlink" title="什么是顶点程序和片段程序"></a>什么是顶点程序和片段程序</h5><p>顶点着色器是一组指令代码，这组指令代码在顶点被渲染时执行。</p><p>片段着色器也是在 GPU 上运行的小程序。它们负责输出每个呈现的三角形像素的最终像素颜色。基本而言，它的工作原理如下：片段着色器以输入的形式收到顶点着色器通过管道传递的所有这些片段。</p></li></ol><h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><ol><li>Unity引擎中以下对Mesh Renderer组件描述正确的是哪一项？ C<br>A．Mesh Renderer组件决定了场景中游戏对象的位置，旋转和缩放<br>B．为场景中的某一游戏对象增添物理的特性，需要为该游戏对象添加Mesh Renderer组件<br>C．Mesh Renderer组件从Mesh Filter组件中获得网格信息，病根据物体的Transform组件所定义的位置进行渲染<br>D．Mesh Renderer是从网格资源中获取网格信息的组件</li><li>哪种实时光源是 Unity 中没有的？D<br>A:点光源<br>B:方向光<br>C:聚光灯<br>D:日光灯</li><li>如何在 Unity 中创建地形系统？A<br>A：Terrain-&gt;Create Terrain<br>B：Component-&gt;Create Terrain<br>C：Asset-&gt;Create Terrain<br>D：Windows-&gt;Create Terrain</li><li>以下哪种操作步骤可以在场景中添加“Wind Zone”？B<br>A：Terrain -&gt; Wind Zone<br>B：GameObject -&gt; Create Other -&gt; Wind Zone<br>C：Component -&gt; Physics -&gt; Wind Zone<br>D：Assets -&gt; Create -&gt; Wind Zone</li><li>在 Unity 编辑器中创建一个 Directional Light，以下步骤正确的是？ B<br>A：Edit -&gt; Rendering Setting -&gt; Directional Light<br>B：GameObject -&gt; Create Other -&gt; Directional Light<br>C：Component -&gt; Rendering -&gt; Directional Light<br>D：Assets -&gt; Directional Light</li><li>下列哪一项不属于 Camera 中的“Clear Flags”？D<br>A：Skybox<br>B：Solid Color<br>C：Depth Only<br>D：Background</li><li>.以下哪种脚本语言是 Unity 编辑器所不支持的？ D<br>A：JavaScript<br>B：C#<br>C：Boo<br>D：Perl</li><li>对于 Prefab，以下说法错误的是？ D<br>A：Prefab 资源可以在项目中多次重复使用<br>B：由 Prefab 实例出的 GameObject，其在 Hierarchy 视图中表现为蓝色<br>C：Prefab 上的组件信息一经改变，其实例出的 GameObject 也会自动改变<br>D：实例出的 GameObject 上的组件信息一经改变，其对应的 Prefab 也会自动改变</li><li>下面哪种做法可以打开 Unity 的 Asset Store？ A<br>A：Windows -&gt; Asset Store<br>B：Edit -&gt; Asset Store<br>C：File -&gt; Asset Store<br>D：Assets -&gt; Asset Store</li><li>在哪个面板中可以修改物体的空间属性，如位置、朝向、大小等？B<br>A：Project<br>B：Inspector<br>C：Hierarchy<br>D：Toolbar</li><li>如何为一个 Asset 资源设定一个 Label，从而能够方便准确的搜索到? D<br>A：在 Project 窗口中选中一个 Asset,右键-&gt;Create-&gt;Label<br>B：在 Project 窗口中选中一个 Asset,右键-&gt;Add Label<br>C：在 Project 窗口中选中一个 Asset,在 Inspector 窗口中点击添加 Label 的图标<br>D：在 Project 窗口中选中一个 Asset,在 Inspector 窗口中点击按钮“Add Label”</li><li>Mecanim 系统中，Body Mask 的作用是？D<br>A:指定身体的某一部分是否参与骨骼动画<br>B:指定身体的某一部分是否参与物理模拟<br>C:指定身体的某一部分是否可以输出骨骼信息<br>D:指定身体的某一部分是否参与渲染</li><li>以下哪种操作步骤可以打开 Unity 编辑器的 Lightmapping 视图？ C<br>A：File –&gt; Lightmapping<br>B：Assets –&gt; Lightmapping<br>C：Windows –&gt; Lightmapping<br>D：Component –&gt; Lightmapping</li><li>下列关于光照贴图，说法错误的是？ C<br>A：使用光照贴图比使用实时光源渲染要快<br>B：可以降低游戏内存消耗<br>C：可以增加场景真实感<br>D：多个物体可以使用同一张光照贴图</li><li>如何为物体添加光照贴图所使用的 UV？ B<br>A：不用添加，任何时候都会自动生成<br>B：更改物体导入设置，勾选“Generate Lightmap UVs”<br>C：更改物体导入设置，勾选“Swap UVs”<br>D：更改物体导入设置，在 UVs 选项中选择“Use Lightmaps”</li><li>在哪个模块下可以修改 Render Path？ A<br>A：Camera<br>B：Light<br>C：Render Settings<br>D：Project Settings-&gt;Quality</li><li>以下哪项技术不是目前 Unity 所支持的 Occlusion Culling 技术？ D<br>A：PVS only<br>B：PVS and dynamic objects<br>C：Automatic Portal Generation<br>D：Dynamic Only</li><li>关于 Vector3 的 API，以下说法正确的是？ C<br>A：Vector3.normalize 可以获取一个三维向量的法线向量；<br>B：Vector3.magnitude 可以获取一个三维向量的长度；<br>C：Vector3.forward 与 Vector3（0,0,1）是一样的意思；<br>D：Vector3.Dot（向量 A，向量 B）是用来计算向量 A 与向量 B 的叉积</li><li>下列那些选项不是网格层属性的固有选项? A<br>A：Default<br>B：Walkable<br>C：Not Walkable<br>D：Jump</li><li>什么是导航网格（NavMesh）？ D<br>A：一种用于描述相机轨迹的网格<br>B：一种被优化过的物体网格<br>C：一种用于物理碰撞的网格<br>D：一种用于实现自动寻路的网格</li><li>以下哪一个选项不属于Unity引擎所支持的视频格式文件 D<br>A．后缀名为mov的文件<br>B．后缀名为mpg的文件<br>C．后缀名为avi的文件<br>D. 后缀名为swf的文件</li><li>Unity引擎使用的是左手坐标系还是右手坐标系？ A<br>A．左手坐标系<br>B．右手坐标系<br>C．可以通过Project Setting 切换左右手坐标系<br>D．可以通过Reference切换左右手坐标系</li><li>以下哪组摄像机中Normalized View Port Rect的数值设置可以使得摄像机显示的画面位于1280*720分辨率的屏幕画面的右上角 D<br>A. x &#x3D; 640, Y &#x3D; -360 , W &#x3D; 360,H &#x3D; 360<br>B. x &#x3D;640, Y &#x3D; -360 , W &#x3D; 360,H &#x3D; 360<br>C. x &#x3D;0.5, Y &#x3D; 0 , W &#x3D; 0.5,H &#x3D; 0.5<br>C. x &#x3D;0.5, Y &#x3D; 0.5 , W &#x3D; 0.5,H &#x3D; 0.5</li><li>以下哪个组件是任何GameObject必备的组件 B<br>A.Mesh Renderer<br>B.Trtansform<br>C.Game Object<br>D.Main camera</li><li>在Unity编辑器中，停止对Game视图进行预览播放的快捷键操作是以下哪一项 A<br>A．CTRL&#x2F;CMD + P<br>B．CTRL&#x2F;CMD + Shift +P<br>C．CTRL&#x2F;CMD + Alt +P<br>D．CTRL&#x2F;CMD + S</li><li>在Unity引擎中，Depth属性值最大的摄像机会比Depth属性值小的摄像机更晚绘制么？ A<br>A．是<br>B．否</li><li>下列选项中有关Animator的说法错误的是 D<br>A.Animasstor是Unity引擎内置组件<br>B.任何一个具有动画状态机功能的GameObject都需要一个Animator组件<br>C.它主要用于角色行为的设置，包括StateMachines，混合Blend trees以及通过脚本控制的事件<br>D.Animator同Animation组件的用法是相同的</li><li>.下列哪个视图主要用于显示和编辑所选游戏对象或资源的相关属性 C<br>A．Scene<br>B．Project<br>C．Inspector<br>D．Hierarchy</li><li>Animation.CrossFade 命令作用是：C<br>A.动画放大 B.动画转换 C.动画的淡入为其他动画</li><li>Application.loadLevel 命令为：A<br>A.加载关卡 B.异步加载关卡 C.加载动作</li><li>以下关于WWW.LoadFromCacheOrDownload描述正确的是： C<br>A．可被用于将Text Assets自动缓存到本地磁盘<br>B．可被用于将Resource自动缓存到本地磁盘<br>C．可被用于将Assets Bundles自动缓存到本地磁盘<br>D．可被用于将任意的Unity资源文件自动缓存到本地磁盘</li><li>以下哪个函数在游戏进入新场景后会被马上调用？ C<br>A：MonoBehaviour.OnSceneWasLoaded<br>B：MonoBehaviour.OnSceneEnter<br>C：MonoBehaviour.OnLevelWasLoaded<br>D：MonoBehaviour.OnLevelEnter</li><li>关于MonoBehavior.LateUpdate函数描述错误的是： B<br>A．当MonoBehavior类型应用后，每帧调用一次<br>B．常被用于处理RigidBody的更新<br>C．在所有Update函数执行后才能被调用<br>D．常被用于实现跟随相机效果，且目标物体的位置已经在Update函数中被更新</li><li>某个GameObject有一个名为MyScript的脚本，该脚本中有一个名为DoSomething的函数，则如何在该GameObject的另一个脚本中国调用该函数？ A<br>A．GetComponent().DoSomething()<br>B．GetComponent</li><li>启用MipMaps对内存的影响是？ A<br>A．增加约33%的内存<br>B．减少约33%的内存<br>C．增加约25%的内存<br>D．减少约25%的内存</li><li>以下关于MonoBehaviour.OnGUI()的描述的是： D<br>A．如果MonoBehaviour没有被启用，则OnGUI函数不会被调用<br>B．用于绘制和处理GUI events<br>C．每帧可能会被绘制多次，每次对应于一个GUI event<br>D．每帧被调用一次</li><li>采用Input.mousePosition来获取鼠标在屏幕上的位置，以下表述正确的是： C<br>A．左上角为原点(0, 0)，右下角为(Screen.Width, Screen.Height)<br>B．左下角为原点(0, 0)，右上角为(Screen.Height, Screen.Width)<br>C．左下角为原点(0, 0)，右上角为(Screen.Width, Screen.Height)<br>D．左上角为原点(0, 0)，右下角为(Screen.Height, Screen.Height)</li><li>下面对Rigidbody，描述正确的是()  C<br>A．AddFoce，是恒速运动<br>B．Velocity，是恒速运动 x<br>C．MovePosition是按帧移动</li><li>下面对CharacterController和Rigidbody，描述正确的是 ()  C<br>A．若想CharacterController实现碰撞，必须手动给它增加—个Collider碰撞器 x<br>B．Rigidbody组件自带Collider碰撞器<br>C．CharacterController，只能响应触发器事件</li><li>3.在3D世界中，怎么得到由玩家面向怪物的一个向量()  B<br>A．玩家的世界位詈-怪物的世界位置<br>B．怪物的世界位置-玩家的世界位苦</li><li>Unity中，关于GC说法正确的是()  C<br>A．分代压缩 x<br>B．非分代压缩<br>C．非分代非压缩</li></ol><h2 id="相关拓展插件"><a href="#相关拓展插件" class="headerlink" title="相关拓展插件"></a>相关拓展插件</h2><ol><li><p>itween 插件的作用是什么，itween 作用于世界坐标还是局部坐标，请列举出 3 个其常用方法？</p><p>iTween 是一个动画库，作者创建它的目的就是最小的投入实现最大的产出。让你做开发更轻松，用它可以轻松实现各种动画，晃动，旋转，移动，褪色，上色，控制音频等等“方法：<br>a、MoveTo 物体移动；<br>b、ColorTo：随着时间改变对象的颜色组；<br>c、LookTo：随时间旋转物体让其脸部朝向所提供的 Vector3 或 Transform 位置；</p></li><li><p>使用过哪些第三方插件？</p><p>一 界面制作 推荐：NGUI<br>二 2D 游戏制作 推荐：2D Toolkit &#x2F;&#x2F;[ˈtu:lkɪt] 工具包，工具箱<br>三可视化编程 推荐：PlayMaker<br>四 插值插件 推荐：iTween,HOTween<br>五 路径搜寻 推荐：Simple Path<br>六 美术及动画制作 推荐：RageSpline,Smooth Move<br>七 画面增强 推荐：Bitmap2Material,Strumpy Shader Editor<br>八 摄像机管理 推荐：Security Camera<br>九 资源包 推荐：Nature Pack<br>十、造路插件 EasyRoads3D</p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> c# </category>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
